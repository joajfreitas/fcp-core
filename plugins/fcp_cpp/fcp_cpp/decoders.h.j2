#pragma once

namespace fcp {

template<typename UnderlyingType, std::size_t BitSize>
class Unsigned {
public:
    Unsigned(): data_{0} {}
    Unsigned(UnderlyingType value): data_{value} {}

    static Unsigned Decode(Buffer& buffer) {
        auto word = buffer.get_word(BitSize);
        return Unsigned(static_cast<UnderlyingType>(word));
    }

    void _encode(Buffer& buffer) const {
        buffer.push_word<UnderlyingType, BitSize>(data_) ;
    }

    UnderlyingType GetData() const {
        return data_;
    }

    inline bool operator==(const Unsigned& rhs) const
    {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        ss << (int) data_;
        return ss.str();
    }

private:
    UnderlyingType data_;
};


template<typename UnderlyingType, std::size_t BitSize>
class Signed {
public:
    Signed(): data_{0}{}
    Signed(UnderlyingType value): data_{value} {}

    static Signed Decode(Buffer& buffer) {
        auto word = buffer.get_word(BitSize, true);
        return Signed(static_cast<UnderlyingType>(word));
    }

    void _encode(Buffer& buffer) const {
        buffer.push_word<UnderlyingType, BitSize>(data_) ;
    }

    UnderlyingType GetData() const {
        return data_;
    }

    inline bool operator==(const Signed& rhs) const
    {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        ss << (int) data_;
        return ss.str();
    }

private:
    UnderlyingType data_;
};

class Float {
public:
    using UnderlyingType = float;
    static constexpr unsigned BitSize = 32;

    Float(): data_{0.0}{}
    Float(UnderlyingType value): data_{value} {}

    static Float Decode(Buffer& buffer) {
        auto word = buffer.get_word(BitSize);

        UnderlyingType data{};
        std::memcpy(&data, &word, 4);

        return Float(data);
    }

    void _encode(Buffer& buffer) const {
        std::uint32_t tmp = 0;
        std::memcpy(&tmp, &data_, 4);
        buffer.push_word<std::uint32_t, BitSize>(tmp) ;
    }

    UnderlyingType GetData() const {
        return data_;
    }

    inline bool operator==(const Float& rhs) const
    {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        ss << data_;
        return ss.str();
    }

private:
    UnderlyingType data_;
};


class Double {
public:
    using UnderlyingType = double;
    static constexpr unsigned BitSize = 64;

    Double(): data_{0.0}{}
    Double(UnderlyingType value): data_{value} {}

    static Double Decode(Buffer& buffer) {
        auto word = buffer.get_word(BitSize);

        UnderlyingType data{};
        std::memcpy(&data, &word, 8);

        return Double(data);
    }

    void _encode(Buffer& buffer) const {
        std::uint64_t tmp = 0;
        std::memcpy(&tmp, &data_, 8);
        buffer.push_word<std::uint64_t, BitSize>(tmp) ;
    }

    UnderlyingType GetData() const {
        return data_;
    }

    inline bool operator==(const Double& rhs) const
    {
        return GetData() == rhs.GetData();
    }


    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        ss << data_;
        return ss.str();
    }

private:
    UnderlyingType data_;
};

template<typename T, std::size_t N>
class Array {
    public:

    Array(): data_{} {}
    Array(std::array<T, N> value): data_{value} {}
    Array(std::initializer_list<T> ls) {
        std::copy(ls.begin(), ls.end(), data_.begin());
    }

    static Array Decode(Buffer& buffer) {
        std::array<T, N> data{0};

        for (int i=0; i<N; i++) {
            data[i] = T::Decode(buffer);
        }

        return Array(data);
    }

    void _encode(Buffer& buffer) const {
        for (int i=0; i<N; i++) {
            data_[i]._encode(buffer);
        }
    }

    const std::array<T,N>& GetData() const {
        return data_;
    }

    inline bool operator==(const Array& rhs) const
    {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix="") const {
        std::stringstream ss{};
        ss << "[";
        for (int i=0; i<N-1; i++){
            ss << data_[i].to_string() << ", ";
        }
        ss << data_[N-1].to_string() << "]";
        return ss.str();
    }

private:
    std::array<T, N> data_;
};


class String {
    public:

    String(): data_{} {}
    String(const std::string& value): data_{value} {}
    String(const char* value): data_{value} {}

    static String Decode(Buffer& buffer) {
        std::string data{};
        auto len = Unsigned<std::uint32_t, 32>::Decode(buffer).GetData();
        for (int i=0; i<len; i++) {
            data.push_back(Unsigned<std::uint8_t, 8>::Decode(buffer).GetData());
        }

        return String(data);
    }

    void _encode(Buffer& buffer) const {
        Unsigned<std::uint32_t, 32>(data_.size())._encode(buffer);
        for (const auto& c: data_) {
            Unsigned<std::uint8_t, 8>(c)._encode(buffer);
        }
    }

    std::string GetData() const {
        return data_;
    }

    inline bool operator==(const String& rhs) const
    {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix="") const {
        return data_;
    }


private:
    std::string data_;
};

template<typename T>
class DynamicArray {
    public:

    DynamicArray(): data_{} {}
    DynamicArray(const std::vector<T>& value): data_{value} {}
    DynamicArray(const char* value): data_{value} {}
    DynamicArray(std::initializer_list<T> ls) : data_{ls} {}

    static DynamicArray Decode(Buffer& buffer) {
        std::vector<T> data{};
        auto len = Unsigned<std::uint32_t, 32>::Decode(buffer).GetData();
        for (int i=0; i<len; i++) {
            data.push_back(T::Decode(buffer));
        }

        return DynamicArray(data);
    }

    void _encode(Buffer& buffer) const {
        Unsigned<std::uint32_t, 32>(data_.size())._encode(buffer);
        for (auto x: data_) {
            x._encode(buffer);
        }
    }

    std::vector<T> GetData() const {
        return data_;
    }

    inline bool operator==(const DynamicArray& rhs) const
    {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix="") const {
        std::stringstream ss{};
        ss << "[";
        for (int i=0; i<data_.size(); i++) {
            ss << data_[i].to_string();
            if (i != data_.size()-1) {
                ss << data_[i].to_string() << ", ";
            }
        }
        ss << "]";

        return ss.str();
    }


private:
    std::vector<T> data_;
};

template<typename T>
class Optional {
    public:

    Optional(): data_{} {}
    Optional(const std::optional<T>& value): data_{value} {}

    static Optional None() {
        return Optional(std::nullopt);
    }

    static Optional Some(const T& value) {
        return Optional(value);
    }

    static Optional Decode(Buffer& buffer) {
        std::optional<T> data;
        auto is_some = Unsigned<std::uint8_t, 8>::Decode(buffer).GetData();

        if (is_some) {
            data = T::Decode(buffer);
        }
        else {
            data = std::nullopt;
        }

        return Optional(data);
    }

    void _encode(Buffer& buffer) const {
        Unsigned<std::uint8_t, 8>(data_.has_value() ? 1 : 0)._encode(buffer);

        if (data_.has_value()) {
            data_.value()._encode(buffer);
        }
    }

    std::optional<T> GetData() const {
        return data_;
    }

    inline bool operator==(const Optional& rhs) const
    {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix="") const {
        std::stringstream ss{};
        if (data_.has_value()) {
            ss << "Some(";
            ss << data_.value().to_string();
            ss << ")";
        }
        else {
            ss << "None";
        }

        return ss.str();
    }


private:
    std::optional<T> data_;
};
}
