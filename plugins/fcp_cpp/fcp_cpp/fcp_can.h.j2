#ifndef __FCP_CAN_H__
#define __FCP_CAN_H__

#include <map>
#include <any>
#include <cstdint>
#include <string>
#include <optional>
#include <cstring>

#include "fcp.h"

namespace fcp {
namespace can {

struct frame_t {
    std::uint16_t sid;
    std::uint8_t dlc;
    std::array<std::uint8_t, 8> data;
};

template<typename T>
static std::optional<T> decode_msg(const frame_t& frame) {
    switch(frame.sid) {
    {% for struct, impl in structs %}
    {% if impl %}
    case {{impl.id}}:
    return T(frame.data.begin(), frame.data.end());
    {% endif %}
    {% endfor %}
    }
    return std::nullopt;
}

template<typename T>
static std::optional<frame_t> encode_msg(const T& obj) {
    static std::map<std::string, std::uint16_t> can_sid_mapping { {% for struct, impl in structs %}{"{{impl.impl.name}}", {{impl.id}} }{% if not loop.last %},{% endif %}{% endfor %} };

    unsigned sid = 0;
    if (auto search = can_sid_mapping.find(T::GetName()); search != can_sid_mapping.end()) {
        sid = search->second;
    }
    else {
        return std::nullopt;
    }

    auto encoded = obj.encode().GetData();

    std::array<std::uint8_t, 8> data{};

    for (int i=0; i<T::GetSize(); i++) {
        data[i] = encoded[i];
    }

    return frame_t{static_cast<std::uint16_t>(sid), static_cast<std::uint8_t>(T::GetSize()), data};
}

static std::optional<std::string> get_device_name(uint16_t can_sid) {
    std::map<uint16_t, std::string> can_sid_mapping { {%- for can_encoding in can_encodings.values() -%} { {{can_encoding.id}}, "{{can_encoding.device_name}}"}, {%- endfor -%} };
    if (auto search = can_sid_mapping.find(can_sid); search != can_sid_mapping.end()) {
        return std::optional{search->second};
    }
    else {
        return std::nullopt;
    }
}

} // namesapce can
} // namespace fcp

#endif // __FCP_CAN_H__
