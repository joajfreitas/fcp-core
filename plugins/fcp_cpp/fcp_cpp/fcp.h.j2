#ifndef __FCP_H__
#define __FCP_H__

#include <vector>
#include <cstdint>
#include <map>
#include <any>
#include <array>
#include <variant>
#include <memory>
#include <string>
#include <sstream>
#include <algorithm>
#include <cstring>

namespace fcp {

namespace {

template<typename Iterator>
uint8_t get_bit(Iterator input, uint8_t bit) {
    auto byte_address = bit >> 3;
    auto intra_byte_bit_address = bit & 0b111;

    return (*(input+byte_address) >> intra_byte_bit_address) & 0b1;
}

class Buffer {
public:
    Buffer(std::size_t size): buffer_((size + 7)/8) {}
    Buffer(const std::vector<uint8_t>& buffer): buffer_{buffer} {}
    template<typename Iterator>
    Buffer(Iterator first, Iterator last): buffer_{first, last} {}


    uint64_t get_word(std::size_t bitstart, std::size_t bitlength) const {
        uint64_t result = 0;
        for (uint64_t i=0; i<bitlength; i++) {
            result |= (uint64_t) (get_bit(buffer_.begin(), bitstart + i)) << i;
        }

        return result;
    }

    template<typename T, std::size_t Size>
    void push_word(T word, std::size_t bitstart) {
        for (int i=0; i<Size; i++) {
            set_bit((word >> i) & 0b1, bitstart + i);
        }
    }

    std::vector<uint8_t> GetData() const {
        return buffer_;
    }

    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        ss << std::hex << "{";
        for (const auto& x: GetData()) {
            ss << (int) x << ", " ;
        }
        ss << "}";
        return ss.str();
    }

private:
    void set_bit(uint8_t bit, std::size_t bit_index) {
        auto byte_address = bit_index >> 3;
        auto intra_byte_bit_address = bit_index & 0b111;

        buffer_[byte_address] = (buffer_[byte_address] & ~((uint8_t)1 << intra_byte_bit_address)) | ((uint8_t) bit << intra_byte_bit_address);

    }

    std::vector<uint8_t> buffer_;
};
}

template<typename UnderlyingType, std::size_t Size>
class Unsigned {
public:
    Unsigned(): data_{0} {}
    Unsigned(UnderlyingType value): data_{value} {}

    Unsigned(const Buffer& buffer, std::size_t bitstart) {
        auto word = buffer.get_word(bitstart, Size);
        data_ = static_cast<UnderlyingType>(word);
    }

    void _encode(Buffer& buffer, std::size_t bitstart) {
        buffer.push_word<UnderlyingType, Size>(data_, bitstart) ;
    }

    static std::size_t GetSize() {
        return Size;
    }

    inline bool operator==(const Unsigned& rhs) const
    {
        return true;
    }

    UnderlyingType GetData() const {
        return data_;
    }

    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        ss << (int) data_;
        return ss.str();
    }

private:
    UnderlyingType data_;
};


template<typename UnderlyingType, std::size_t Size>
class Signed {
public:
    Signed(): data_{0}{}
    Signed(UnderlyingType value): data_{value} {}

    Signed(const Buffer& buffer, std::size_t bitstart) {
        auto word = buffer.get_word(bitstart, Size);
        data_ = static_cast<UnderlyingType>(word);
    }

    void _encode(Buffer& buffer, std::size_t bitstart) {
        buffer.push_word<UnderlyingType, Size>(data_, bitstart) ;
    }

    static std::size_t GetSize() {
        return Size;
    }

    inline bool operator==(const Signed& rhs) const
    {
        return true;
    }

    UnderlyingType GetData() const {
        return data_;
    }

    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        ss << (int) data_;
        return ss.str();
    }

private:
    UnderlyingType data_;
};

class Float {
public:
    using UnderlyingType = float;
    static constexpr unsigned Size = 32;

    Float(): data_{0.0}{}
    Float(UnderlyingType value): data_{value} {}

    Float(const Buffer& buffer, std::size_t bitstart) {
        auto word = buffer.get_word(bitstart, Size);
        std::memcpy(&data_, &word, 4);
    }

    void _encode(Buffer& buffer, std::size_t bitstart) {
        std::uint32_t tmp = 0;
        std::memcpy(&tmp, &data_, 4);
        buffer.push_word<std::uint32_t, Size>(tmp, bitstart) ;
    }

    static std::size_t GetSize() {
        return Size;
    }

    inline bool operator==(const Float& rhs) const
    {
        return data_ == rhs.GetData();
    }

    UnderlyingType GetData() const {
        return data_;
    }

    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        ss << data_;
        return ss.str();
    }

private:
    UnderlyingType data_;
};


class Double {
public:
    using UnderlyingType = double;
    static constexpr unsigned Size = 64;

    Double(): data_{0.0}{}
    Double(UnderlyingType value): data_{value} {}

    Double(const Buffer& buffer, std::size_t bitstart) {
        auto word = buffer.get_word(bitstart, Size);
        std::memcpy(&data_, &word, 8);
    }

    void _encode(Buffer& buffer, std::size_t bitstart) {
        std::uint64_t tmp = 0;
        std::memcpy(&tmp, &data_, 8);
        buffer.push_word<std::uint64_t, Size>(tmp, bitstart) ;
    }

    static std::size_t GetSize() {
        return Size;
    }

    inline bool operator==(const Double& rhs) const
    {
        return data_ == rhs.GetData();
    }

    UnderlyingType GetData() const {
        return data_;
    }

    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        ss << data_;
        return ss.str();
    }

private:
    UnderlyingType data_;
};

template<typename T, std::size_t N>
class Array {
    public:

    Array(): data_{} {}
    Array(std::array<T, N> value): data_{value} {}

    Array(std::initializer_list<T> ls) {
    std::transform(ls.begin(), ls.end(), data_.begin(), [](const T& x){return x;});
    }

    Array(const Buffer& buffer, std::size_t bitstart=0) {
        for (int i=0; i<N; i++) {
            data_[i] = T(buffer, bitstart);
            bitstart += T::GetSize();
        }
    }

    void _encode(Buffer& buffer, std::size_t bitstart) {
        for (int i=0; i<N; i++) {
            data_[i]._encode(buffer, bitstart + i*T::GetSize());
        }
    }

    static std::size_t GetSize() {
        return N*T::GetSize();
    }

    const std::array<T,N>& GetData() const {
        return data_;
    }

    inline bool operator==(const Array& rhs) const
    {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix="") const {
        std::stringstream ss{};
        ss << "[";
        for (int i=0; i<N-1; i++){
            ss << data_[i].to_string() << ", ";
        }
        ss << data_[N-1].to_string() << "]";
        return ss.str();
    }


private:
    std::array<T, N> data_;
};


{% for enum in fcp.enums %}
class {{enum.name}} {
public:
    using UnderlyingType = std::uint8_t;
    {% for enumeration in enum.enumeration %}
    static constexpr UnderlyingType {{enumeration.name}} = {{enumeration.value}};
    {% endfor %}

    {{enum.name}}(): data_{} {}
    {{enum.name}}(UnderlyingType value): data_{value} {}

    {{enum.name}}(const Buffer& buffer, std::size_t bitstart=0) {
        data_ = buffer.get_word(bitstart, GetSize());
    }

    void _encode(Buffer& buffer, std::size_t bitstart) {
        buffer.push_word<UnderlyingType, {{enum.get_packed_size()}}>(data_, bitstart);
    }

    static std::size_t GetSize() {
        return {{enum.get_packed_size()}};
    }

    UnderlyingType GetData() const {
        return data_;
    }

    inline bool operator==(const {{enum.name}}& rhs) const {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix="") const {
        std::stringstream ss{};

        switch(GetData()) {
        {% for enumeration in enum.enumeration %}
            case {{enum.name}}::{{enumeration.name}}:
            return "{{enumeration.name}}";
        {% endfor %}
        default:
            return "DecodingError";
        }
    }

private:
    UnderlyingType data_;
};
{% endfor %}


{% for struct, impl in structs %}
struct {{struct.name}} {
    {% for signal in struct.fields %}
    using {{signal.name | capitalize}}Type = {{to_wrapper_cpp_type(signal.type)}};
    {% endfor %}

    {{struct.name}}({% for signal in struct.fields%}{{signal.name | capitalize}}Type {{signal.name}}{%if not loop.last%},{%endif%}{%endfor%}): {% for signal in struct.fields %}{{signal.name}}_{ {{signal.name}} }{% if not loop.last %},{% endif %}{% endfor %} {}

    static {{struct.name}} Encode(const Buffer& buffer, std::size_t bitstart=0) {
    {%for signal in struct.fields%}
        auto {{signal.name}} = {{signal.name | capitalize}}Type(buffer, bitstart);
        bitstart += {{signal.name | capitalize}}Type::GetSize();
    {%endfor%}

        return {{struct.name}}({% for signal in struct.fields %}{{signal.name}}{% if not loop.last %},{% endif %}{% endfor %});
    }

    template<typename Iterator>
    static {{struct.name}} Encode(Iterator begin, Iterator end) {
        return {{struct.name}}::Encode(Buffer{begin, end});
    }

    void _encode(Buffer& buffer, std::size_t bitstart) {
    {% for signal in struct.fields %}
        {{signal.name}}_._encode(buffer, bitstart);
        bitstart += {{signal.name | capitalize}}Type::GetSize();
    {% endfor %}
    }

    Buffer encode() {
        Buffer buffer{GetSize()};
        _encode(buffer, 0);
        return buffer;
    }

    {% for signal in struct.fields %}
    {{signal.name | capitalize}}Type Get{{signal.name | capitalize}}() const {
        return {{signal.name}}_;
    }
    {% endfor %}

    static std::size_t GetSize() {
        return {% for signal in struct.fields %}{{signal.name | capitalize}}Type::GetSize(){% if not loop.last %}+{% endif %}{% endfor %};
    }

    inline bool operator==(const {{struct.name}}& rhs) const {
        return  {% for signal in struct.fields %}{{signal.name}}_ == rhs.Get{{signal.name | capitalize}}(){% if not loop.last %}&&{% endif %}{% endfor %};
    }

    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        auto p = prefix + "\t";
        ss << "{{struct.name}} {" << std::endl;
        {% for signal in struct.fields %}
        ss << p << "{{signal.name}}: " << {{signal.name}}_.to_string(p) << std::endl;
        {% endfor %}
        ss << prefix << "}" << std::endl;
        return ss.str();
    }
private:
    {% for signal in struct.fields %}
    {{signal.name | capitalize}}Type {{signal.name}}_;
    {% endfor %}
};
{% endfor %}

} // namespace fcp

#endif // __FCP_CAN_H__
