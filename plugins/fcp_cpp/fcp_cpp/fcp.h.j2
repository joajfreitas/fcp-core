#pragma once

#include <vector>
#include <cstdint>
#include <map>
#include <any>
#include <array>
#include <variant>
#include <memory>
#include <string>
#include <sstream>
#include <algorithm>
#include <cstring>
#include <optional>


#include "buffer.h"
#include "decoders.h"

namespace fcp {

{% for enum in fcp.enums %}
class {{enum.name}} {
public:
    using UnderlyingType = std::uint8_t;
    {% for enumeration in enum.enumeration %}
    static constexpr UnderlyingType {{enumeration.name}} = {{enumeration.value}};
    {% endfor %}

    {{enum.name}}(): data_{} {}
    {{enum.name}}(UnderlyingType value): data_{value} {}

    static {{enum.name}} Decode(Buffer& buffer) {
        UnderlyingType data = buffer.get_word(GetSize());
        return data;
    }

    void _encode(Buffer& buffer) const {
        buffer.push_word<UnderlyingType, {{enum.get_packed_size()}}>(data_);
    }

    Buffer encode() {
        Buffer buffer{0};
        _encode(buffer);
        return buffer;
    }

    static std::size_t GetSize() {
        return {{enum.get_packed_size()}};
    }

    UnderlyingType GetData() const {
        return data_;
    }

    inline bool operator==(const {{enum.name}}& rhs) const {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix="") const {
        std::stringstream ss{};

        switch(GetData()) {
        {% for enumeration in enum.enumeration %}
            case {{enum.name}}::{{enumeration.name}}:
            return "{{enumeration.name}}";
        {% endfor %}
        default:
            return "DecodingError";
        }
    }

private:
    UnderlyingType data_;
};
{% endfor -%}
{%- for struct in structs %}
struct {{struct.name}} {
    {%- for signal in struct.fields %}
    using {{signal.name | capitalize}}Type = {{to_wrapper_cpp_type(signal.type)}};
    {%- endfor %}

    {{struct.name}}():
    {%- for signal in struct.fields %}
    {{signal.name}}_{{'{'}}{{'}'}}{% if not loop.last %},{% endif %}
    {%- endfor %}
    {}

    {{struct.name}}({% for signal in struct.fields %}{{signal.name | capitalize}}Type {{signal.name}}{% if not loop.last %},{% endif %}{% endfor %}):
    {%- for signal in struct.fields %}
    {{signal.name}}_{{'{'}}{{signal.name}}{{'}'}}{% if not loop.last %},{% endif %}
    {%- endfor %}
    {}

    static {{struct.name}} Decode(Buffer& buffer) {
    {%- for signal in struct.fields %}
        auto {{signal.name}} = {{signal.name | capitalize}}Type::Decode(buffer);
    {%- endfor %}

        return {{struct.name}}({% for signal in struct.fields %}{{signal.name}}{% if not loop.last %},{% endif %}{% endfor %});
    }

    template<typename Iterator>
    static {{struct.name}} Decode(Iterator begin, Iterator end) {
        auto buffer = Buffer{begin, end};
        return {{struct.name}}::Decode(buffer);
    }

    void _encode(Buffer& buffer) const {
    {%- for signal in struct.fields %}
        {{signal.name}}_._encode(buffer);
    {%- endfor %}
    }

    Buffer encode() {
        Buffer buffer{0};
        _encode(buffer);
        return buffer;
    }

    {% for signal in struct.fields %}
    {{signal.name | capitalize}}Type Get{{signal.name | capitalize}}() const {
        return {{signal.name}}_;
    }
    {% endfor %}

    {% for signal in struct.fields %}
    {{signal.name | capitalize}}Type& View{{signal.name | capitalize}}() {
        return {{signal.name}}_;
    }
    {% endfor %}

    inline bool operator==(const {{struct.name}}& rhs) const {
        return  {% for signal in struct.fields %}{{signal.name}}_ == rhs.Get{{signal.name | capitalize}}(){% if not loop.last %}
        {{'\t'}}&& {% endif %}{% endfor %};
    }

    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        auto p = prefix + "\t";
        ss << "{{struct.name}} {" << std::endl;
        {%- for signal in struct.fields %}
        ss << p << "{{signal.name}}: " << {{signal.name}}_.to_string(p) << std::endl;
        {%- endfor %}
        ss << prefix << "}" << std::endl;
        return ss.str();
    }
private:
    {%- for signal in struct.fields %}
    {{signal.name | capitalize}}Type {{signal.name}}_;
    {%- endfor %}
};
{% endfor -%}
} // namespace fcp
