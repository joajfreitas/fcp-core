#ifndef __FCP_H__
#define __FCP_H__

#include <vector>
#include <cstdint>
#include <map>
#include <any>
#include <array>
#include <variant>
#include <memory>
#include <string>
#include <sstream>
#include <algorithm>
#include <cstring>
#include <optional>

namespace fcp {

namespace {

template<typename Iterator>
uint8_t get_bit(Iterator input, uint32_t bit) {
    auto byte_address = bit >> 3;
    auto intra_byte_bit_address = bit & 0b111;

    return (*(input+byte_address) >> intra_byte_bit_address) & 0b1;
}

class Buffer {
public:
    Buffer(std::size_t size): buffer_((size + 7)/8), current_bit_{0} {}
    Buffer(const std::vector<uint8_t>& buffer): buffer_{buffer}, current_bit_{0} {}
    template<typename Iterator>
    Buffer(Iterator first, Iterator last): buffer_{first, last}, current_bit_{0} {}

    uint64_t get_word(uint64_t bitlength, bool sign=false) {
        uint64_t result = 0;
        for (uint64_t i=0; i<bitlength; i++) {
            auto word = static_cast<uint64_t>(get_bit(buffer_.begin(), current_bit_ + i)) << i;
            result |= word;
        }

        uint64_t mask = 1ULL << (bitlength - 1);

        bool msb_set = (result >> (bitlength-1)) == 1;
        if (sign && msb_set && !(msb_set && bitlength == 64)) {
            result = (result ^ mask) - mask;
        }

        current_bit_ += bitlength;

        return result;
    }

    template<typename T, std::size_t Size>
    void push_word(T word) {
        for (int i=0; i<Size; i++) {
            set_bit((word >> i) & 0b1, current_bit_ + i);
        }

        current_bit_ += Size;
    }

    std::vector<uint8_t> GetData() const {
        return buffer_;
    }

    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        ss << std::hex << "{";
        for (const auto& x: GetData()) {
            ss << (int) x << ", " ;
        }
        ss << "}";
        return ss.str();
    }

private:
    void set_bit(uint8_t bit, std::size_t bit_index) {
        auto byte_address = bit_index >> 3;
        auto intra_byte_bit_address = bit_index & 0b111;

        if (byte_address >= buffer_.size()) {
            extend();
        }

        buffer_[byte_address] = (buffer_[byte_address] & ~((uint8_t)1 << intra_byte_bit_address)) | ((uint8_t) bit << intra_byte_bit_address);
    }

    void extend() {
        buffer_.push_back(0);
    }

    std::vector<uint8_t> buffer_;
    std::uint32_t current_bit_;
};
}

template<typename UnderlyingType, std::size_t Size>
class Unsigned {
public:
    Unsigned(): data_{0} {}
    Unsigned(UnderlyingType value): data_{value} {}

    Unsigned(Buffer& buffer) {
        auto word = buffer.get_word(Size);
        data_ = static_cast<UnderlyingType>(word);
    }

    void _encode(Buffer& buffer) const {
        buffer.push_word<UnderlyingType, Size>(data_) ;
    }

    UnderlyingType GetData() const {
        return data_;
    }

    inline bool operator==(const Unsigned& rhs) const
    {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        ss << (int) data_;
        return ss.str();
    }

private:
    UnderlyingType data_;
};


template<typename UnderlyingType, std::size_t Size>
class Signed {
public:
    Signed(): data_{0}{}
    Signed(UnderlyingType value): data_{value} {}

    Signed(Buffer& buffer) {
        auto word = buffer.get_word(Size, true);
        data_ = static_cast<UnderlyingType>(word);
    }

    void _encode(Buffer& buffer) const {
        buffer.push_word<UnderlyingType, Size>(data_) ;
    }

    UnderlyingType GetData() const {
        return data_;
    }

    inline bool operator==(const Signed& rhs) const
    {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        ss << (int) data_;
        return ss.str();
    }

private:
    UnderlyingType data_;
};

class Float {
public:
    using UnderlyingType = float;
    static constexpr unsigned Size = 32;

    Float(): data_{0.0}{}
    Float(UnderlyingType value): data_{value} {}

    Float(Buffer& buffer) {
        auto word = buffer.get_word(Size);
        std::memcpy(&data_, &word, 4);
    }

    void _encode(Buffer& buffer) const {
        std::uint32_t tmp = 0;
        std::memcpy(&tmp, &data_, 4);
        buffer.push_word<std::uint32_t, Size>(tmp) ;
    }

    UnderlyingType GetData() const {
        return data_;
    }

    inline bool operator==(const Float& rhs) const
    {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        ss << data_;
        return ss.str();
    }

private:
    UnderlyingType data_;
};


class Double {
public:
    using UnderlyingType = double;
    static constexpr unsigned Size = 64;

    Double(): data_{0.0}{}
    Double(UnderlyingType value): data_{value} {}

    Double(Buffer& buffer) {
        auto word = buffer.get_word(Size);
        std::memcpy(&data_, &word, 8);
    }

    void _encode(Buffer& buffer) const {
        std::uint64_t tmp = 0;
        std::memcpy(&tmp, &data_, 8);
        buffer.push_word<std::uint64_t, Size>(tmp) ;
    }

    UnderlyingType GetData() const {
        return data_;
    }

    inline bool operator==(const Double& rhs) const
    {
        return GetData() == rhs.GetData();
    }


    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        ss << data_;
        return ss.str();
    }

private:
    UnderlyingType data_;
};

template<typename T, std::size_t N>
class Array {
    public:

    Array(): data_{} {}
    Array(std::array<T, N> value): data_{value} {}

    Array(std::initializer_list<T> ls) {
    std::transform(ls.begin(), ls.end(), data_.begin(), [](const T& x){return x;});
    }

    Array(Buffer& buffer) {
        for (int i=0; i<N; i++) {
            data_[i] = T(buffer);
        }
    }

    void _encode(Buffer& buffer) const {
        for (int i=0; i<N; i++) {
            data_[i]._encode(buffer);
        }
    }

    const std::array<T,N>& GetData() const {
        return data_;
    }

    inline bool operator==(const Array& rhs) const
    {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix="") const {
        std::stringstream ss{};
        ss << "[";
        for (int i=0; i<N-1; i++){
            ss << data_[i].to_string() << ", ";
        }
        ss << data_[N-1].to_string() << "]";
        return ss.str();
    }


private:
    std::array<T, N> data_;
};


class String {
    public:

    String(): data_{} {}
    String(const std::string& value): data_{value} {}
    String(const char* value): data_{value} {}

    String(Buffer& buffer) {
        auto len = Unsigned<std::uint32_t, 32>(buffer).GetData();
        for (int i=0; i<len; i++) {
            data_ += buffer.get_word(8);
        }
    }

    void _encode(Buffer& buffer) const {
        Unsigned<std::uint32_t, 32>(data_.size())._encode(buffer);
        for (const auto& c: data_) {
            buffer.push_word<std::uint8_t, 8>(c);
        }
    }

    std::string GetData() const {
        return data_;
    }

    inline bool operator==(const String& rhs) const
    {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix="") const {
        return data_;
    }


private:
    std::string data_;
};

template<typename T>
class DynamicArray {
    public:

    DynamicArray(): data_{} {}
    DynamicArray(const std::vector<T>& value): data_{value} {}
    DynamicArray(const char* value): data_{value} {}

    DynamicArray(Buffer& buffer) {
        auto len = Unsigned<std::uint32_t, 32>(buffer).GetData();
        for (int i=0; i<len; i++) {
            data_.push_back(T(buffer));
        }
    }

    void _encode(Buffer& buffer) const {
        Unsigned<std::uint32_t, 32>(data_.size())._encode(buffer);
        for (auto x: data_) {
            x._encode(buffer);
        }
    }

    std::vector<T> GetData() const {
        return data_;
    }

    inline bool operator==(const DynamicArray& rhs) const
    {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix="") const {
        std::stringstream ss{};
        ss << "[";
        for (int i=0; i<data_.size(); i++) {
            ss << data_[i].to_string();
            if (i != data_.size()-1) {
                ss << data_[i].to_string() << ", ";
            }
        }
        ss << "]";

        return ss.str();
    }


private:
    std::vector<T> data_;
};

template<typename T>
class Optional {
    public:

    Optional(): data_{} {}
    Optional(const std::optional<T>& value): data_{value} {}

    static Optional None() {
        return Optional(std::nullopt);
    }

    static Optional Some(const T& value) {
        return Optional(value);
    }

    Optional(Buffer& buffer) {
        auto is_some = Unsigned<std::uint8_t, 8>(buffer).GetData();

        if (is_some) {
            data_ = T(buffer);
        }
        else {
            data_ = std::nullopt;
        }
    }

    void _encode(Buffer& buffer) const {
        Unsigned<std::uint8_t, 8>(data_.has_value() ? 1 : 0)._encode(buffer);

        if (data_.has_value()) {
            data_.value()._encode(buffer);
        }
    }

    std::optional<T> GetData() const {
        return data_;
    }

    inline bool operator==(const Optional& rhs) const
    {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix="") const {
        std::stringstream ss{};
        if (data_.has_value()) {
            ss << "Some(";
            ss << data_.value().to_string();
            ss << ")";
        }
        else {
            ss << "None";
        }

        return ss.str();
    }


private:
    std::optional<T> data_;
};

{% for enum in fcp.enums %}
class {{enum.name}} {
public:
    using UnderlyingType = std::uint8_t;
    {% for enumeration in enum.enumeration %}
    static constexpr UnderlyingType {{enumeration.name}} = {{enumeration.value}};
    {% endfor %}

    {{enum.name}}(): data_{} {}
    {{enum.name}}(UnderlyingType value): data_{value} {}

    {{enum.name}}(Buffer& buffer) {
        data_ = buffer.get_word(GetSize());
    }

    void _encode(Buffer& buffer) const {
        buffer.push_word<UnderlyingType, {{enum.get_packed_size()}}>(data_);
    }

    static std::size_t GetSize() {
        return {{enum.get_packed_size()}};
    }

    UnderlyingType GetData() const {
        return data_;
    }

    inline bool operator==(const {{enum.name}}& rhs) const {
        return GetData() == rhs.GetData();
    }

    std::string to_string(std::string prefix="") const {
        std::stringstream ss{};

        switch(GetData()) {
        {% for enumeration in enum.enumeration %}
            case {{enum.name}}::{{enumeration.name}}:
            return "{{enumeration.name}}";
        {% endfor %}
        default:
            return "DecodingError";
        }
    }

private:
    UnderlyingType data_;
};
{% endfor -%}
{%- for struct in structs %}
struct {{struct.name}} {
    {%- for signal in struct.fields %}
    using {{signal.name | capitalize}}Type = {{to_wrapper_cpp_type(signal.type)}};
    {%- endfor %}

    {{struct.name}}({% for signal in struct.fields %}{{signal.name | capitalize}}Type {{signal.name}}{% if not loop.last %},{% endif %}{% endfor %}):
    {%- for signal in struct.fields %}
    {{signal.name}}_{{'{'}}{{signal.name}}{{'}'}}{% if not loop.last %},{% endif %}
    {%- endfor %}
    {}

    static {{struct.name}} Decode(Buffer& buffer) {
    {%- for signal in struct.fields %}
        auto {{signal.name}} = {{signal.name | capitalize}}Type(buffer);
    {%- endfor %}

        return {{struct.name}}({% for signal in struct.fields %}{{signal.name}}{% if not loop.last %},{% endif %}{% endfor %});
    }

    template<typename Iterator>
    static {{struct.name}} Decode(Iterator begin, Iterator end) {
        auto buffer = Buffer{begin, end};
        return {{struct.name}}::Decode(buffer);
    }

    void _encode(Buffer& buffer) const {
    {%- for signal in struct.fields %}
        {{signal.name}}_._encode(buffer);
    {%- endfor %}
    }

    Buffer encode() {
        Buffer buffer{0};
        _encode(buffer);
        return buffer;
    }

    {% for signal in struct.fields %}
    {{signal.name | capitalize}}Type Get{{signal.name | capitalize}}() const {
        return {{signal.name}}_;
    }
    {% endfor %}

    inline bool operator==(const {{struct.name}}& rhs) const {
        return  {% for signal in struct.fields %}{{signal.name}}_ == rhs.Get{{signal.name | capitalize}}(){% if not loop.last %}
        {{'\t'}}&& {% endif %}{% endfor %};
    }

    std::string to_string(std::string prefix = "") const {
        std::stringstream ss{};
        auto p = prefix + "\t";
        ss << "{{struct.name}} {" << std::endl;
        {%- for signal in struct.fields %}
        ss << p << "{{signal.name}}: " << {{signal.name}}_.to_string(p) << std::endl;
        {%- endfor %}
        ss << prefix << "}" << std::endl;
        return ss.str();
    }
private:
    {%- for signal in struct.fields %}
    {{signal.name | capitalize}}Type {{signal.name}}_;
    {%- endfor %}
};
{% endfor -%}
} // namespace fcp

#endif // __FCP_CAN_H__
