#pragma once

#include <vector>
#include <cstdint>
#include <map>
#include <any>
#include <array>
#include <variant>
#include <memory>
#include <string>
#include <sstream>
#include <algorithm>
#include <cstring>
#include <optional>

#include <nlohmann/json.hpp>

#include "buffer.h"
#include "decoders.h"
#include "ischema.h"

namespace fcp {
{% if namespace is not none %}
namespace {{namespace}} {
{% endif %}

using json = nlohmann::json;

{% for enum in fcp.enums %}
class {{enum.name}} {
public:
    using UnderlyingType = std::uint8_t;
    {% for enumeration in enum.enumeration %}
    static constexpr UnderlyingType {{enumeration.name}} = {{enumeration.value}};
    {% endfor %}

    {{enum.name}}(): data_{} {}
    {{enum.name}}(UnderlyingType value): data_{value} {}

    static {{enum.name}} FromJson(json j) {
        return {{enum.name}}{j.get<UnderlyingType>()};
    }

    static {{enum.name}} Decode(Buffer& buffer, Endianess endianess=Endianess::Little) {
        UnderlyingType data = buffer.GetWord(GetSize(), false, endianess);
        return data;
    }

    json DecodeJson() const {
        return GetData();
    }

    Buffer Encode(Endianess endianess=Endianess::Little) {
        Buffer buffer{0};
        Encode(buffer, endianess);
        return buffer;
    }

    void Encode(Buffer& buffer, Endianess endianess=Endianess::Little) const {
        buffer.PushWord<UnderlyingType, {{enum.get_packed_size()}}>(data_, endianess);
    }

    static std::size_t GetSize() {
        return {{enum.get_packed_size()}};
    }

    UnderlyingType GetData() const {
        return data_;
    }

    inline bool operator==(const {{enum.name}}& rhs) const {
        return GetData() == rhs.GetData();
    }

    std::string ToString(std::string prefix="") const {
        std::stringstream ss{};

        switch(GetData()) {
        {% for enumeration in enum.enumeration %}
            case {{enum.name}}::{{enumeration.name}}:
            return "{{enumeration.name}}";
        {% endfor %}
        default:
            return "DecodingError";
        }
    }

private:
    UnderlyingType data_;
};
{% endfor -%}
{%- for impl in get_matching_impls(fcp,protocol) %}
{% set struct = get_struct_from_type(fcp,impl.type) %}
struct {{struct.name}} {
    {%- for signal in struct.fields %}
    using {{signal.name | to_pascal_case}}Type = {{to_wrapper_cpp_type(signal.type)}};
    {%- endfor %}

    {{struct.name}}():
    {%- for signal in struct.fields %}
        {{signal.name}}_{{'{'}}{{'}'}}{% if not loop.last %},{% endif %}
    {%- endfor %}
    {}

    {{struct.name}}({% for signal in struct.fields %}{{signal.name | to_pascal_case}}Type {{signal.name}}{% if not loop.last %},{% endif %}{% endfor %}):
    {%- for signal in struct.fields %}
        {{signal.name}}_{{'{'}}{{signal.name}}{{'}'}}{% if not loop.last %},{% endif %}
    {%- endfor %}
    {}

    static {{struct.name}} FromJson(json j){
        return {{struct.name}} {
        {%- for signal in struct.fields %}
            {{signal.name | to_pascal_case}}Type::FromJson(j["{{signal.name}}"]),
        {%- endfor %}
        };
    }

    static {{struct.name}} Decode(Buffer& buffer, Endianess endianess={% if impl.fields.get('endianess', 'little') == 'big' %}Endianess::Big{% else %}Endianess::Little{% endif %}) {
    {%- for signal in struct.fields %}
        auto {{signal.name}} = {{signal.name | to_pascal_case}}Type::Decode(buffer, endianess);
    {%- endfor %}

        return {{struct.name}}({% for signal in struct.fields %}{{signal.name}}{% if not loop.last %},{% endif %}{% endfor %});
    }

    template<typename Iterator>
    static {{struct.name}} Decode(Iterator begin, Iterator end) {
        auto buffer = Buffer{begin, end};
        return {{struct.name}}::Decode(buffer);
    }

    json DecodeJson() const {
        json j{};
        {% for signal in struct.fields -%}
        j["{{signal.name}}"] = {{signal.name}}_.DecodeJson();
        {% endfor -%}

        return j;
    }

    Buffer Encode(Endianess endianess={% if impl.fields.get('endianess', 'little') == 'big' %}Endianess::Big{% else %}Endianess::Little{% endif %}) {
        Buffer buffer{0};
        Encode(buffer, endianess);
        return buffer;
    }

    void Encode(Buffer& buffer, Endianess endianess={% if impl.fields.get('endianess', 'little') == 'big' %}Endianess::Big{% else %}Endianess::Little{% endif %}) const {
    {%- for signal in struct.fields %}
        {{signal.name}}_.Encode(buffer, endianess);
    {%- endfor %}
    }
    {% for signal in struct.fields %}
    {{signal.name | to_pascal_case}}Type Get{{signal.name | to_pascal_case}}() const {
        return {{signal.name}}_;
    }
    {% endfor -%}

    {% for signal in struct.fields %}
    {{signal.name | to_pascal_case}}Type& View{{signal.name | to_pascal_case}}() {
        return {{signal.name}}_;
    }
    {% endfor %}
    inline bool operator==(const {{struct.name}}& rhs) const {
        return  {% for signal in struct.fields %}{{signal.name}}_ == rhs.Get{{signal.name | to_pascal_case}}(){% if not loop.last %}
        {{'\t'}}&& {% endif %}{% endfor %};
    }

    std::string ToString(std::string prefix = "") const {
        std::stringstream ss{};
        auto p = prefix + "\t";
        ss << "{{struct.name}} {" << std::endl;
        {%- for signal in struct.fields %}
        ss << p << "{{signal.name}}: " << {{signal.name}}_.ToString(p) << std::endl;
        {%- endfor %}
        ss << prefix << "}" << std::endl;
        return ss.str();
    }

private:

    {%- for signal in struct.fields %}
    {{signal.name | to_pascal_case}}Type {{signal.name}}_;
    {%- endfor %}
};
{% endfor %}
struct StaticSchema: public ISchema
{
    StaticSchema() = default;

    std::optional<json> DecodeJson(std::string name, std::vector<uint8_t> data, std::string bus="default") override {
        auto buffer = Buffer{data.begin(), data.end()};
        {% for impl in get_matching_impls(fcp, protocol) %}
        {% set struct = get_struct_from_type(fcp, impl.type) %}
        if (name == "{{struct.name}}" && bus == "{{impl.fields.get('bus', 'default')}}") {
            return {{struct.name}}::Decode(buffer).DecodeJson();
        }
        {%- endfor %}

        return std::nullopt;
    }
};
{% if namespace is not none %}
} // {{namespace}}
{% endif %}} // namespace fcp
