#ifndef {{ device_name_snake | upper }}_CAN_H
#define {{ device_name_snake | upper }}_CAN_H

#include <stdint.h>
#include <stdbool.h>

#include "can_frame.h"

/* {{ device_name_pascal }} Message IDs */
{%- for message in messages %}
#define MSG_ID_{{ message.name_snake | upper }} {{ message.frame_id }}
{%- endfor %}
{% for message in messages %}
typedef struct {
    {%- for signal in message.signals %}
    {{ signal.data_type }} {{ signal.name }}{% if signal.is_multiplexer %}[{{ signal.multiplexer_count }}]{% endif %};
    {%- endfor %}
} CanMsg{{ message.name_pascal }};
{% endfor %}
/* {{ device_name_pascal }} device struct. Contains one instance of each device message */
typedef struct {
    {%- for message in messages %}
    CanMsg{{ message.name_pascal }} {{ message.name_snake }};
    {%- endfor %}
} CanDevice{{ device_name_pascal }};

/* Functions to decode CanFrame into CanMsg<name> objects */
{%- for message in messages %}
CanMsg{{ message.name_pascal }} can_decode_msg_{{ message.name_snake }}(const CanFrame *frame);
{%- endfor %}

/* Check if a CanFrame comes from {{ device_name_pascal }} */
bool can_is_{{ device_name_snake }}_msg(const CanFrame *frame);

#endif // {{ device_name_snake | upper }}_CAN_H
