#ifndef {{ device_name_snake | upper }}_RPC_H
#define {{ device_name_snake | upper }}_RPC_H

#include <stdint.h>
#include <stdbool.h>
#include "can_frame.h"

typedef union {
    struct {
        uint8_t service_id;
        uint8_t method_id;
    };
    uint16_t rpc_id;
} CanRpcId;

#define {{ device_name_snake | upper }}_RPC_GET_ID {{ rpc_get_id }}
#define {{ device_name_snake | upper }}_RPC_ANS_ID {{ rpc_ans_id }}

{% for message in rpcs %}
typedef struct {
    CanRpcId id;  // union field must be accessed via 'id'
    {%- for signal in message.signals %}
    {{ signal.data_type }} {{ signal.name }}{% if signal.is_multiplexer %}[{{ signal.multiplexer_count }}]{% endif %};
    {%- endfor %}
} CanRpc{{ message.name_pascal }};
{% endfor %}

typedef enum {
{%- for service in services %}
    {%- for method in service.methods %}
    {{ device_name_snake | upper }}_{{ method.name | upper }} = {{ method.id }},
    {%- endfor %}
{%- endfor %}
} {{ device_name_pascal }}RpcMethodId;

{% for service in services -%}
    {% for method in service.methods %}
void {{ device_name_snake }}_service_handle_{{ method.name | lower }}(
    const CanRpc{{ method.input }} *request,
    CanRpc{{ method.output }} *response
);
    {% endfor %}
{%- endfor -%}

{% for message in rpcs %}
void {{ device_name_snake }}_service_dispatch_{{ message.name_snake }}(
    const CanFrame *frame,
    void (*can_send_func)(const CanFrame *)
);
{% endfor %}

{% for message in rpcs %}
CanRpc{{ message.name_pascal }} can_decode_rpc_{{ message.name_snake }}(const CanFrame *frame);
{% endfor %}

{% for message in rpcs %}
{%- if message.is_multiplexer %}
CanFrame can_encode_rpc_{{ message.name_snake }}(
    const CanRpc{{ message.name_pascal }} *rpc,
    uint32_t {{ message.multiplexer_signal }}
);
{% else %}
CanFrame can_encode_rpc_{{ message.name_snake }}(const CanRpc{{ message.name_pascal }} *rpc);
CanFrame can_encode_rpc_{{ message.name_snake }}_ans(const CanRpc{{ message.name_pascal }} *rpc);
{% endif -%}
{% endfor -%}

#endif // {{ device_name_snake | upper }}_RPC_H
