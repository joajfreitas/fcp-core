#ifndef {{ device_name_snake | upper }}_RPC_H
#define {{ device_name_snake | upper }}_RPC_H

#include <stdint.h>
#include <stdbool.h>
#include "can_frame.h"

/* RPC Get and Answer IDs */
#define {{ device_name_snake | upper }}_RPC_GET_ID {{ rpc_get_id }}
#define {{ device_name_snake | upper }}_RPC_ANS_ID {{ rpc_ans_id }}

/* RpsMethod union */
typedef union {
    struct {
        uint8_t service_id;
        uint8_t method_id;
    };
    uint16_t rpc_id;
} RpcID;

{% for message in rpcs -%}
/* Rpc Message Struct */
typedef struct {
    RpcID rpc_id;
    {%- for signal in message.signals %}
    {{ signal.data_type }} {{ signal.name }}{% if signal.is_multiplexer %}[{{ signal.multiplexer_count }}]{% endif %};
    {%- endfor %}
} CanRpc{{ message.name_pascal }};
{%- endfor %}

{% for message in rpcs -%}
/* Dispatcher */
void can_service_dispatch_{{ message.name_snake }}(const CanFrame *frame, void (*send)(const CanFrame *));
{%- endfor %}

{% for message in rpcs -%}
/* Functions to decode CanFrame into CanRpc{{ message.name_pascal }} objects */
CanRpc{{ message.name_pascal }} can_decode_rpc_{{ message.name_snake }}(const CanFrame *frame);
{%- endfor %}

{% for message in rpcs -%}
/* Functions to encode CanRpc{{ message.name_pascal }} object into CanFrame */
{%- if message.is_multiplexer %}
CanFrame can_encode_rpc_{{message.name_snake}}(const CanRpc{{ message.name_pascal }} *rpc, uint32_t {{message.multiplexer_signal}});
{%- else %}
CanFrame can_encode_rpc_{{message.name_snake}}(const CanRpc{{ message.name_pascal }} *rpc);
CanFrame can_encode_rpc_{{message.name_snake}}_ans(const CanRpc{{ message.name_pascal }} *rpc);
{%- endif %}
{%- endfor %}

#endif // {{ device_name_snake | upper }}_RPC_H