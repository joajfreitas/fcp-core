type uint16_t {
	length: 16,
	byte_order: "little",
}

device ccu_right: id(25) {
    
    /**/
    message tach_right: id(35) | dlc(6) | period(0) {
        
        /*CCU: right flow sensor frequency measurement.*/
        signal frequency_right: size(16, 16);
        
        /*CCU: right flow sensor period measurement.*/
        signal period_right: size(32, 16);
        
        /*CCU: right flow sensor*/
        signal flow_right: size(0, 16)| scale(0.1, 0.0);
        
    }
    
    /**/
    message temp1_right: id(33) | dlc(8) | period(0) {
        
        /*CCU: ntc1 right.*/
        signal ntc1_right: size(0, 16)| scale(0.1, 0.0);
        
        /*CCU: ntc2 right.*/
        signal ntc2_right: size(16, 16)| scale(0.1, 0.0);
        
        /*CCU: ntc3 right.*/
        signal ntc3_right: size(32, 16)| scale(0.1, 0.0);
        
        /*CCU: ntc4 right.*/
        signal ntc4_right: size(48, 16)| scale(0.1, 0.0);
        
    }
    
    /**/
    message temp2_right: id(34) | dlc(8) | period(0) {
        
        /*CCU: ntc5 right.*/
        signal ntc5_right: size(0, 16)| scale(0.1, 0.0);
        
        /*CCU: ntc6 right.*/
        signal ntc6_right: size(16, 16)| scale(0.1, 0.0);
        
        /*CCU: ntc7 right.*/
        signal ntc7_right: size(32, 16)| scale(0.1, 0.0);
        
        /*CCU_ ntc8 right.*/
        signal ntc8_right: size(48, 16)| scale(0.1, 0.0);
        
    }
    
    /**/
    message ccu_status_right: id(36) | dlc(6) | period(1000) {
        
        /**/
        signal motor_status_right: size(0, 16);
        
        /**/
        signal ntc_status_right: size(32, 16);
        
        /**/
        signal max_motor_temp_right: size(48, 16);
        
        /**/
        signal fan_pwm_level_right: size(17, 7)| sat(0.0, 100.0)| scale(0.01, 0.0);
        
        /**/
        signal iib_motor_wdt_right: size(16, 1);
        
        /**/
        signal ccu_right_pump_status: size(24, 3)| sat(0.0, 3.0);
        
        /**/
        signal ccu_right_fan_status: size(27, 3)| sat(0.0, 3.0);
        
    }
    

    
    /**/
    config version: id(0) | type(unsigned);
    
    /**/
    config max_torque_fl: id(3) | type(unsigned);
    
    /**/
    command set_fans_right: id(0) {
    
    
    }
    
    /*receives number of ntcs to be used, the ntcs are turned on in numerical order*/
    command set_ntcs_right: id(1) {
    
    
    }
    
    /**/
    command set_flow_right: id(5) {
    
    
    }
    
    /*Sets PWM3 duty cycle*/
    command set_pwm_3_right: id(4) {
    
    
    }
    
    /*Sets PWM2 duty cycle*/
    command set_pwm_2_right: id(3) {
    
    
    }
    
    /*Sets PWM1 duty cycle*/
    command set_pwm_1_right: id(2) {
    
    
    }
    
}
device ccu_left: id(24) {
    
    /**/
    message tach_left: id(35) | dlc(6) | period(0) {
        
        /**/
        signal frequency_left: size(16, 16);
        
        /**/
        signal period_left: size(32, 16);
        
        /**/
        signal flow_left: size(0, 16)| scale(0.1, 0.0);
        
    }
    
    /**/
    message temp1_left: id(33) | dlc(8) | period(0) {
        
        /*CCU: ntc1 left.*/
        signal ntc1_left: size(0, 16)| scale(0.1, 0.0);
        
        /*CCU: ntc2 left.*/
        signal ntc2_left: size(16, 16)| scale(0.1, 0.0);
        
        /*CCU: ntc3 left.*/
        signal ntc3_left: size(32, 16)| scale(0.1, 0.0);
        
        /*CCU: ntc4 left.*/
        signal ntc4_left: size(48, 16)| scale(0.1, 0.0);
        
    }
    
    /**/
    message temp2_left: id(34) | dlc(8) | period(0) {
        
        /*CCU: ntc5 left.*/
        signal ntc5_left: size(0, 16)| scale(0.1, 0.0);
        
        /*CCU: ntc6 left.*/
        signal ntc6_left: size(16, 16)| scale(0.1, 0.0);
        
        /*CCU: ntc7 left.*/
        signal ntc7_left: size(32, 16)| scale(0.1, 0.0);
        
        /*CCU: ntc8 left.*/
        signal ntc8_left: size(48, 16)| scale(0.1, 0.0);
        
    }
    
    /**/
    message ccu_status_left: id(36) | dlc(6) | period(1000) {
        
        /**/
        signal ntc_status_left: size(32, 16);
        
        /**/
        signal motor_status_left: size(0, 16);
        
        /**/
        signal iib_motor_wdt_left: size(16, 1);
        
        /**/
        signal max_motor_temp_left: size(48, 16);
        
        /**/
        signal fan_pwm_level_left: size(17, 7)| sat(0.0, 100.0)| scale(0.01, 0.0);
        
        /**/
        signal ccu_left_fan_status: size(27, 3)| sat(0.0, 3.0);
        
        /**/
        signal ccu_left_pump_status: size(24, 3)| sat(0.0, 3.0);
        
    }
    

    
    /**/
    config version: id(0) | type(unsigned);
    
    /**/
    config max_torque_fl: id(3) | type(unsigned);
    
    /**/
    command set_fans_left: id(0) {
    
    
    }
    
    /*receives number of ntcs to be used, the ntcs are turned on in numerical order*/
    command set_ntcs_left: id(1) {
    
    
    }
    
    /*toggles flow sensor state*/
    command set_flow_left: id(5) {
    
    
    }
    
    /*Sets PWM3 duty cycle*/
    command set_pwm3_left: id(4) {
    
    
    }
    
    /*Sets PWM2 duty cycle*/
    command set_pwm2_left: id(3) {
    
    
    }
    
    /*Sets PWM1 duty cycle*/
    command set_pwm1_left: id(2) {
    
    
    }
    
}
device iib: id(16) {
    
    /**/
    message iib_motor: id(38) | dlc(8) | period(500) {
        
        /*Motor temperature*/
        signal temp_motor: size(0, 8)| sat(0.0, 1250.0)| mux("n_motor_info", 4);
        
        /*iib_motor mux*/
        signal n_motor_info: size(14, 2)| sat(0.0, 3.0);
        
        /*Motor speed in [RPM]. Downsampled from amk_actual_values.*/
        signal motor_speed: size(16, 16)| sat(0.0, 20000.0)| mux("n_motor_info", 4);
        
        /*Motor current in [A]*/
        signal motor_current: size(32, 16)type(signed)| sat(-105.0, 105.0)| mux("n_motor_info", 4);
        
        /*Motor torque*/
        signal motor_torque: size(48, 16)type(signed)| sat(-21000.0, 21000.0)| mux("n_motor_info", 4);
        
    }
    
    /**/
    message iib_inv: id(39) | dlc(8) | period(500) {
        
        /*Status of the inverter (activate/deactive)*/
        signal inv_active: size(0, 1)| sat(0.0, 1.0)| mux("n_inv_info", 4);
        
        /*Inverter enable bit 1.*/
        signal BE_1: size(1, 1)| sat(0.0, 1.0)| mux("n_inv_info", 4);
        
        /*Inverter enable bit 2.*/
        signal BE_2: size(2, 1)| sat(0.0, 1.0)| mux("n_inv_info", 4);
        
        /*iib_inv message mux.*/
        signal n_inv_info: size(3, 2)| sat(0.0, 3.0);
        
        /*Status of the derating*/
        signal inv_derating_on: size(5, 1)| sat(0.0, 1.0)| mux("n_inv_info", 4);
        
        /*If max temperature was passed*/
        signal inv_max_passed: size(6, 1)| sat(0.0, 1.0)| mux("n_inv_info", 4);
        
        /*If igbt deratign is on*/
        signal igbt_derating_on: size(7, 1)| sat(0.0, 1.0)| mux("n_inv_info", 4);
        
        /*if igbt max temp was passed*/
        signal igbt_max_passed: size(8, 1)| sat(0.0, 1.0)| mux("n_inv_info", 4);
        
        /*if motor derating is on*/
        signal motor_derating_on: size(9, 1)| sat(0.0, 1.0)| mux("n_inv_info", 4);
        
        /*if motor temperature was passed*/
        signal motor_max_passed: size(10, 1)| sat(0.0, 1.0)| mux("n_inv_info", 4);
        
        /*if i2t overload is active*/
        signal i2t_overload_active: size(11, 1)| sat(0.0, 1.0)| mux("n_inv_info", 4);
        
        /*if i2t has cooldown on*/
        signal i2t_cooldown_on: size(12, 1)| sat(0.0, 1.0)| mux("n_inv_info", 4);
        
        /*Inverter's IGBT temp*/
        signal inv_temp_igbt: size(16, 16)| sat(0.0, 125.0)| mux("n_inv_info", 4);
        
        /*Inverters Temperature*/
        signal inv_temp: size(32, 16)| sat(0.0, 660.0)| mux("n_inv_info", 4);
        
        /*Inverter error info*/
        signal inv_error: size(48, 16)| mux("n_inv_info", 4);
        
    }
    
    /**/
    message iib_limits: id(40) | dlc(8) | period(500) {
        
        /*Inverter max safety power*/
        signal max_sfty_power: size(0, 8)type(signed)| sat(-35000.0, 35000.0)| mux("n_inv_limits", 4);
        
        /*Number of the Inverter*/
        signal n_inv_limits: size(14, 2)| sat(0.0, 3.0);
        
        /*Max operating power*/
        signal max_op_power: size(16, 16)type(signed)| sat(-35000.0, 35000.0)| mux("n_inv_limits", 4);
        
        /*Max safety Torque*/
        signal max_sfty_torque: size(32, 16)type(signed)| sat(-21000.0, 21000.0)| mux("n_inv_limits", 4);
        
        /*Max Operating Torque*/
        signal max_op_torque: size(48, 16)type(signed)| sat(-21000.0, 21000.0)| mux("n_inv_limits", 4);
        
    }
    
    /**/
    message iib_car: id(41) | dlc(8) | period(500) {
        
        /*Torque Encoder Status*/
        signal car_te_ok: size(0, 1)| sat(0.0, 1.0);
        
        /*An ARM setpoint message was received*/
        signal car_arm_msg: size(3, 1)| sat(0.0, 1.0);
        
        /*Shutdown Circuit 1 detection*/
        signal car_sdc1: size(4, 1)| sat(0.0, 1.0);
        
        /*Shutdown Circuit 2 detection*/
        signal car_sdc2: size(5, 1)| sat(0.0, 1.0);
        
        /*Car Ready-to-Drive status*/
        signal car_rtd: size(6, 1)| sat(0.0, 1.0);
        
        /*Inverters have HV */
        signal inv_hv: size(7, 1)| sat(0.0, 1.0);
        
        /*TSAL status*/
        signal car_tsal: size(8, 1)| sat(0.0, 1.0);
        
        /*Torque Encoder percentage*/
        signal te_perc: size(16, 16);
        
        /*IIB operating mode*/
        signal iib_input_mode: size(32, 16)| sat(0.0, 3.0);
        
        /*BMS voltage*/
        signal bms_voltage: size(48, 16)| sat(0.0, 670.0);
        
        /*Arm stupid status*/
        signal car_etas_stupid: size(2, 1)| sat(0.0, 1.0);
        
        /*External input watchdog exceeded*/
        signal car_ext_exceed: size(1, 1)| sat(0.0, 1.0);
        
    }
    
    /**/
    message iib_info: id(37) | dlc(8) | period(500) {
        
        /*IIB ambient temperature*/
        signal iib_air_tmp: size(0, 16)type(signed)| sat(0.0, 60.0);
        
        /*Discharge Temperature*/
        signal iib_disch_tmp: size(16, 16)| sat(0.0, 100.0);
        
        /*Max safety RPM*/
        signal max_sfty_rpm: size(32, 16)| sat(0.0, 20000.0);
        
        /*If IIB fan is on*/
        signal iib_fan_on: size(48, 1)| sat(0.0, 1.0);
        
        /*if CUA has power*/
        signal cua_power: size(49, 1)| sat(0.0, 1.0);
        
        /*if CUA has power*/
        signal cub_power: size(50, 1)| sat(0.0, 1.0);
        
        /*If inverters are ready-to-drive*/
        signal inv_rtd: size(51, 1)| sat(0.0, 1.0);
        
        /*Inverter on.*/
        signal inv_on: size(52, 1)| sat(0.0, 1.0);
        
        /*IIB regeneration enable bit.*/
        signal regen_on: size(53, 1)| sat(0.0, 1.0);
        
        /*IIB debug enable bit*/
        signal iib_debug_mode: size(54, 1)| sat(0.0, 1.0);
        
        /*IIB latch error.*/
        signal iib_error_latch: size(55, 4)type(signed)| sat(0.0, 16.0);
        
        /*1 if SOC derrating is ON*/
        signal soc_derrating_on: size(59, 1)| sat(0.0, 1.0);
        
        /*1 if power limiter is ON*/
        signal pl_on: size(61, 1)| sat(0.0, 1.0);
        
    }
    
    /**/
    message iib_debug1_info: id(43) | dlc(8) | period(0) {
        
        /*iib_debug1_info message mux.*/
        signal n_iib_debug1: size(0, 2)| sat(0.0, 3.0);
        
        /*An ARM message setpoint was received*/
        signal debug1_arm_msg: size(2, 1)| sat(0.0, 1.0);
        
        /*Inverter node address.*/
        signal debug1_node_address: size(3, 4)| mux("n_iib_debug1", 4);
        
        /*Torque Encoder is alive again.*/
        signal debug1_te_realive: size(7, 1)| sat(0.0, 1.0);
        
        /*Maximum i2t current.*/
        signal debug1_max_i2t_current: size(16, 16)| mux("n_iib_debug1", 4);
        
        /*I2t saturation time.*/
        signal debug1_i2t_sat_time: size(32, 16)| mux("n_iib_debug1", 4);
        
        /*Cooldown on time.*/
        signal debug1_cldwn_on_time: size(48, 16)| mux("n_iib_debug1", 4);
        
    }
    
    /**/
    message iib_debug2_info: id(44) | dlc(8) | period(0) {
        
        /*iib_debug2_info message mux.*/
        signal n_debug2_info: size(0, 2)| sat(0.0, 3.0);
        
        /*AMK system ready bit.*/
        signal debug2_inv_sys_rdy: size(8, 1)type(signed)| sat(0.0, 1.0)| mux("n_debug2_info", 4);
        
        /*AMK inverter error bit.*/
        signal debug2_inv_err: size(9, 1)type(signed)| sat(0.0, 1.0)| mux("n_debug2_info", 4);
        
        /*AMK inverters warning bit.*/
        signal debug2_inv_warn: size(10, 1)type(signed)| sat(0.0, 1.0)| mux("n_debug2_info", 4);
        
        /*AMK quit DC ON bit.*/
        signal debug2_inv_quit_dc_on: size(11, 1)type(signed)| sat(0.0, 1.0)| mux("n_debug2_info", 4);
        
        /*AMK inverter DC ON bit.*/
        signal debug2_inv_dc_on: size(12, 1)type(signed)| sat(0.0, 1.0)| mux("n_debug2_info", 4);
        
        /*AMK inverter quit inverter on bit.*/
        signal debug2_inv_quit_inv_on: size(13, 1)type(signed)| sat(0.0, 1.0)| mux("n_debug2_info", 4);
        
        /*AMK inverter on bit.*/
        signal debug2_inv_on: size(14, 1)type(signed)| sat(0.0, 1.0)| mux("n_debug2_info", 4);
        
        /*AMK derating on bit.*/
        signal debug2_derating: size(15, 1)type(signed)| sat(0.0, 1.0)| mux("n_debug2_info", 4);
        
        /*msg1 id from AMK.*/
        signal debug2_msg1_id: size(16, 16)type(signed)| mux("n_debug2_info", 4);
        
        /*msg2 id from AMK.*/
        signal debug2_msg2_id: size(32, 16)| mux("n_debug2_info", 4);
        
        /*Reference id from AMK.*/
        signal debug2_redid: size(48, 16)| mux("n_debug2_info", 4);
        
    }
    
    /**/
    message iib_regen_limits: id(45) | dlc(8) | period(500) {
        
        /*iib_regen_limits message mux.*/
        signal n_motor_regen: size(0, 2)| sat(0.0, 3.0);
        
        /*Maximum regeneration safety torque.*/
        signal regen_max_sfty_torque: size(16, 16)| sat(0.0, 21000.0)| mux("n_motor_regen", 4);
        
        /*Maximum regeneration operational torque*/
        signal regen_max_op_torque: size(32, 16)| sat(0.0, 21000.0)| mux("n_motor_regen", 4);
        
        /*Maximum regeneration safety power.*/
        signal regen_max_sfty_pwr: size(48, 16)| mux("n_motor_regen", 4);
        
    }
    
    /**/
    message iib_amk_values_1: id(50) | dlc(8) | period(0) {
        
        /*iib_amk_values_1 mux.*/
        signal n_amk_values1: size(0, 2)| sat(0.0, 3.0);
        
        /*AMK system ready.*/
        signal amk_sys_rdy: size(8, 1)| sat(0.0, 1.0)| mux("n_amk_values1", 4);
        
        /*AMK error bit.*/
        signal amk_err: size(9, 1)| sat(0.0, 1.0)| mux("n_amk_values1", 4);
        
        /*AMK warning bit.*/
        signal amk_warn: size(10, 1)| sat(0.0, 1.0)| mux("n_amk_values1", 4);
        
        /*AMK quit dc on bit. Signals HV presence in inverter.*/
        signal amk_quit_dc_on: size(11, 1)| sat(0.0, 1.0)| mux("n_amk_values1", 4);
        
        /*AMK dc on bit. Signals HV presence in inverter.*/
        signal amk_dc_on: size(12, 1)| sat(0.0, 1.0)| mux("n_amk_values1", 4);
        
        /*AMK quit inverter on but.*/
        signal amk_quit_inv_on: size(13, 1)| sat(0.0, 1.0)| mux("n_amk_values1", 4);
        
        /*AMK inverter on bit.*/
        signal amk_inv_on: size(14, 1)| sat(0.0, 1.0)| mux("n_amk_values1", 4);
        
        /*AMK derating on bit. Signals activation of deratings.*/
        signal amk_derating: size(15, 1)| sat(0.0, 1.0)| mux("n_amk_values1", 4);
        
        /*Target speed for the motor in [RPM].*/
        signal amk_actual_speed: size(16, 16)type(signed)| sat(0.0, 20000.0)| unit("rpm")| mux("n_amk_values1", 4);
        
        /*AMK torque current. Current measurement, can be used to measure torque. Conversion: $torque = current*107.5/16384*0.26$.*/
        signal amk_torque_c: size(32, 16)type(signed)| sat(-105.0, 105.0)| mux("n_amk_values1", 4);
        
        /*AMK magnetizing current*/
        signal amk_magn_c: size(48, 16)type(signed)| mux("n_amk_values1", 4);
        
    }
    
    /**/
    message iib_amk_values_2: id(51) | dlc(8) | period(0) {
        
        /*AMK motor temperature.*/
        signal amk_temp_motor: size(2, 14)| mux("n_amk_values2", 4);
        
        /*AMK inverter temperature*/
        signal amk_temp_inverter: size(16, 16)| mux("n_amk_values2", 4);
        
        /*AMK error info.*/
        signal amk_error_info: size(32, 16)| mux("n_amk_values2", 4);
        
        /*AMK IGBT temperature.*/
        signal amk_temp_igbt: size(48, 16)| mux("n_amk_values2", 4);
        
        /*amk_actual_values mux.*/
        signal n_amk_values2: size(0, 2)| sat(0.0, 3.0);
        
    }
    
    /**/
    message iib_debug_amk: id(52) | dlc(8) | period(0) {
        
        /*iib_debug_amk message mux.*/
        signal n_debug_amk: size(0, 2)| sat(0.0, 3.0);
        
        /*AMK Control word inverter on.*/
        signal debug_b_inv_on: size(8, 1)| sat(0.0, 1.0)| mux("n_debug_amk", 4);
        
        /*AMK Control word dc on.*/
        signal debug_b_dc_on: size(9, 1)| sat(0.0, 1.0)| mux("n_debug_amk", 4);
        
        /*AMK Control word enable.*/
        signal debug_b_enable: size(10, 1)| sat(0.0, 1.0)| mux("n_debug_amk", 4);
        
        /*AMK Control word error reset.*/
        signal debug_b_err_rst: size(11, 1)| sat(0.0, 1.0)| mux("n_debug_amk", 4);
        
        /*Debug AMK desired RPM.*/
        signal debug_dsr_rpm: size(16, 16)| sat(0.0, 20000.0)| mux("n_debug_amk", 4);
        
        /*Debug AMK desired negative torque.*/
        signal debug_dsr_t_n: size(32, 16)type(signed)| mux("n_debug_amk", 4);
        
        /*Debug AMK desired positive torque.*/
        signal debug_dsr_t_p: size(48, 16)type(signed)| sat(0.0, 20000.0)| mux("n_debug_amk", 4);
        
    }
    
    /**/
    message iib_reset: id(29) | dlc(2) | period(0) {
        
        /*IIB RCON bit. http://ww1.microchip.com/downloads/en/DeviceDoc/S8.pdf*/
        signal iib_rcon: size(0, 16)| sat(0.0, 1.0);
        
    }
    
    /**/
    message iib_trap: id(30) | dlc(4) | period(0) {
        
        /*IIB trap type. Trap types: https://gitlab.com/projectofst/opensource/software10e/-/blob/master/lib/hal/lib_pic33e/trap.h*/
        signal iib_trap_type: size(0, 16);
        
        /*IIB trap line*/
        signal iib_trap_line: size(16, 16);
        
    }
    
    /**/
    message iib_diff: id(55) | dlc(8) | period(0) {
        
        /*iib_diff message mux.*/
        signal n_iib_diff: size(14, 2)| sat(0.0, 3.0);
        
        /*Torque reduction applied by differential controller.*/
        signal iib_diff_value: size(16, 16)type(signed)| mux("n_iib_diff", 4);
        
        /*Resulting positive torque positive after application of differential controller.*/
        signal iib_diff_t_p: size(32, 16)| mux("n_iib_diff", 4);
        
        /*Steering angle used by differential controller.*/
        signal iib_diff_steer_ang: size(48, 16)type(signed);
        
        /*Differential controller gain.*/
        signal iib_diff_gain: size(0, 14);
        
    }
    
    /**/
    message iib_status: id(32) | dlc(8) | period(1000) {
        
        /*AMK system ready.*/
        signal iib_status_sys_rdy: size(8, 1)| sat(0.0, 1.0);
        
        /*AMK error.*/
        signal iib_status_err: size(9, 1)| sat(0.0, 1.0);
        
        /*AMK warning.*/
        signal iib_status_warn: size(10, 1)| sat(0.0, 1.0);
        
        /*AMK quit dc on.*/
        signal iib_status_quit_dc_on: size(11, 1)| sat(0.0, 1.0);
        
        /*AMK dc on.*/
        signal iib_status_dc_on: size(12, 1)| sat(0.0, 1.0);
        
        /*AMK quit inverter on.*/
        signal iib_status_quit_inv_on: size(13, 1)| sat(0.0, 1.0);
        
        /*AMK inverter on.*/
        signal iib_status_inv_on: size(14, 1)| sat(0.0, 1.0);
        
        /*AMK derating on.*/
        signal iib_status_derating_on: size(15, 1)| sat(0.0, 1.0);
        
        /*IIB max car power limit.*/
        signal max_car_pwr: size(16, 16)| sat(0.0, 100.0);
        
    }
    
    /**/
    message pre_eff: id(42) | dlc(8) | period(0) {
        
        /*Positive torque before application of efficiency table.*/
        signal pre_eff_t_p: size(0, 16)| sat(0.0, 20000.0)| mux("n_pre_eff", 4);
        
        /*Negative torque before application of efficiency table.*/
        signal pre_eff_t_n: size(16, 16)type(signed)| sat(-20000.0, 0.0)| mux("n_pre_eff", 4);
        
        /*pre-eff message mux.*/
        signal n_pre_eff: size(32, 2)| sat(0.0, 3.0);
        
    }
    

    
    /*git version commit*/
    config version: id(0) | type(unsigned);
    
    /*IIB regeneration on*/
    config regen_on: id(1) | type(unsigned);
    
    /*Max operating torque FL wheel*/
    config torque_fl: id(2) | type(unsigned);
    
    /*Max operating torque FR wheel*/
    config torque_fr: id(3) | type(unsigned);
    
    /*Max operating torque RL wheel*/
    config torque_rl: id(4) | type(unsigned);
    
    /*Max operating torque RR wheel*/
    config torque_rr: id(5) | type(unsigned);
    
    /*Max operating power FL wheel*/
    config pwr_fl: id(6) | type(unsigned);
    
    /*Max operating power FR wheel*/
    config pwr_fr: id(7) | type(unsigned);
    
    /*Max operating power RL wheel*/
    config pwr_rl: id(8) | type(unsigned);
    
    /*Max operating power RR wheel*/
    config pwr_rr: id(9) | type(unsigned);
    
    /*iib debug mode*/
    config debug_mode: id(10) | type(unsigned);
    
    /*IIB input mode*/
    config input_mode: id(11) | type(unsigned);
    
    /*max rpm*/
    config rpm: id(12) | type(unsigned);
    
    /*max regen torque FL wheel*/
    config regen_torque_fl: id(13) | type(unsigned);
    
    /*max regen torque FR wheel*/
    config regen_torque_fr: id(14) | type(unsigned);
    
    /*max regen torque RL wheel*/
    config regen_torque_rl: id(15) | type(unsigned);
    
    /*Max regen torque RR wheel*/
    config regen_torque_rr: id(16) | type(unsigned);
    
    /*AMK control mode*/
    config amk_control_mode: id(17) | type(unsigned);
    
    /*Max regen power FL wheel*/
    config max_regen_pwr_fl: id(18) | type(unsigned);
    
    /*Max regen power FR wheel*/
    config max_regen_pwr_fr: id(19) | type(unsigned);
    
    /*Max regen power RL wheel*/
    config regen_pwr_rl: id(20) | type(unsigned);
    
    /*Max regen power RR wheel*/
    config regen_pwr_rr: id(21) | type(unsigned);
    
    /*Derating Power Limiter ON*/
    config pl_on: id(22) | type(unsigned);
    
    /*Max total car power*/
    config max_car_pwr: id(23) | type(unsigned);
    
    /*Min total car power [kW]*/
    config min_car_pwr: id(24) | type(unsigned);
    
    /*Min power for derating soc curve calculation [kW]*/
    config minp_drt_soc: id(25) | type(unsigned);
    
    /*Max power for derating soc curve calculation [kW]*/
    config maxp_drt_soc: id(26) | type(unsigned);
    
    /*Number of cycles to do endurance mode*/
    config endurance_cycles: id(27) | type(unsigned);
    
    /*Desired SOC to end the endurance*/
    config final_soc: id(28) | type(unsigned);
    
    /*Differential gain*/
    config diff_gain: id(29) | type(unsigned);
    
    /*Sets SOC derrating ON/OFF*/
    config soc_derrating_on: id(30) | type(unsigned);
    
    /*Set regeneration on*/
    command set_regen_on: id(0) {
    
    
    }
    
    /*Save all parameters in flash*/
    command save_flash: id(1) {
    
    
    }
    
    /*Setpoints for test bench mode motor 0*/
    command ext_input0: id(2) {
    
    
    }
    
    /*Setpoints for external input mode motor 1*/
    command ext_input1: id(3) {
    
    
    }
    
    /*Setpoints for external input mode motor 2*/
    command ext_input2: id(4) {
    
    
    }
    
    /*Setpoints for external input mode motor 3*/
    command ext_input3: id(5) {
    
    
    }
    
    /*Input mode command*/
    command input_mode: id(6) {
    
    
    }
    
    /*Derating power limiter status*/
    command set_pl: id(7) {
    
    
    }
    
    /*Derating power limiter status*/
    command lap_count: id(8) {
    
        /**/
        arg : id(1) | type(unsigned);
    
    
    }
    
    /*sums all arguments*/
    command add: id(9) {
    
        /**/
        arg : id(2) | type(unsigned);
    
    
    }
    
    /*requests rtd on*/
    command rtd_on: id(10) {
    
    
    }
    
    /*requests rtd off*/
    command rtd_off: id(0) {
    
    
    }
    
}
device dash: id(10) {
    
    /**/
    message dash_se: id(34) | dlc(2) | period(40) {
        
        /*Dash Steering encoder signal.*/
        signal dash_se: size(0, 16)type(signed)| sat(-180.0, 180.0);
        
    }
    
    /**/
    message dash_status: id(32) | dlc(2) | period(1000) {
        
        /*Dash shutdown circuit detection.*/
        signal dash_sdc: size(0, 1)| sat(0.0, 1.0);
        
        /*Dash RTD state.*/
        signal dash_rtd: size(1, 1)| sat(0.0, 1.0);
        
        /*Dash TS state.*/
        signal dash_ts: size(2, 1)| sat(0.0, 1.0);
        
    }
    

    
    /*dash version*/
    config version: id(0) | type(unsigned);
    
    /*position frequency*/
    config se_update_freq: id(1) | type(unsigned);
    
    /*steering encoder's offset*/
    config se_offset: id(2) | type(unsigned);
    
    /*Zeroes the offset of the steering wheel.*/
    command se_calibrate: id(0) {
    
    
    }
    
    /*Writes parameters in flash memory.*/
    command write_flash: id(1) {
    
    
    }
    
}
device te: id(9) {
    
    /**/
    message te_main: id(10) | dlc(8) | period(25) {
        
        /*APPS0 short circuit detection bit.*/
        signal te_status_cc_apps0: size(0, 1)| sat(0.0, 1.0);
        
        /*APPS1 short circuit detection bit.*/
        signal te_status_cc_apps1: size(1, 1)| sat(0.0, 1.0);
        
        /*BPS electric short circuit detection bit.*/
        signal te_status_cc_bpse0: size(2, 1)| sat(0.0, 1.0);
        
        /*BPS Pressure 0 short circuit detection bit.*/
        signal te_status_cc_bpsp0: size(3, 1)| sat(0.0, 1.0);
        
        /*BPS Pressure 1 short circuit detection bit.*/
        signal te_status_cc_bpsp1: size(4, 1)| sat(0.0, 1.0);
        
        /*APPS0 overshoot detection bit.*/
        signal te_status_os_apps0: size(5, 1)| sat(0.0, 1.0);
        
        /*APPS1 overshot detection bit.*/
        signal te_status_os_apps1: size(6, 1)| sat(0.0, 1.0);
        
        /*BPS eletric overshoot detection bit.*/
        signal te_status_os_bpse: size(7, 1)| sat(0.0, 1.0);
        
        /*FSG2022 EV 2.3 APPS/Brake pedal implausibility check.*/
        signal te_status_imp_apps_bps_timer_exceeded: size(9, 1)| sat(0.0, 1.0);
        
        /*Hard braking status bit.*/
        signal te_status_hb: size(10, 1)| sat(0.0, 1.0);
        
        /*TE shutdown circuit detection.*/
        signal te_status_sdc: size(11, 1)| sat(0.0, 1.0);
        
        /*TE verbose status bit.*/
        signal te_status_verbose: size(12, 1)| sat(0.0, 1.0);
        
        /*FSG2022 EV 2.3 APPS/Brake pedal implausibility check, without 500ms timer.*/
        signal te_status_imp_apps_bps: size(14, 1)| sat(0.0, 1.0);
        
        /*BPS pressure overshoot detection bit.*/
        signal te_os_bpsp0: size(15, 1)| sat(0.0, 1.0);
        
        /*APPS value.*/
        signal te_main_APPS: size(16, 16)| sat(0.0, 100.0)| scale(0.01, 0.0)| unit("%");
        
        /*BPS pressure value.*/
        signal te_main_BPSp: size(32, 16)| sat(0.0, 100.0)| scale(0.01, 0.0)| unit("%");
        
        /*BPS eletric value.*/
        signal te_main_BPSe: size(48, 16)| sat(0.0, 100.0)| scale(0.01, 0.0)| unit("%");
        
        /*T 11.8.8 - If an implausibility occurs between the values of the APPSs and persists for more than 100 ms, status bit.*/
        signal te_status_imp_apps_timer_exceeded: size(8, 1)| sat(0.0, 1.0);
        
        /*T 11.8.8 - If an implausibility occurs between the values of the APPSs and persists for more than 100 ms, status bit without 100ms timer.*/
        signal te_status_imp_apps: size(13, 1)| sat(0.0, 1.0);
        
    }
    
    /**/
    message te_limit: id(35) | dlc(4) | period(0) {
        
        /*Limit answer header*/
        signal te_limit_header: size(0, 16);
        
        /*TE data limit*/
        signal te_data_limit: size(16, 16);
        
    }
    
    /**/
    message te_press: id(36) | dlc(4) | period(25) {
        
        /*Brake pressure front.*/
        signal te_press_f: size(0, 16)| sat(0.0, 160.0)| scale(0.01, 0.0)| unit("bar");
        
        /*Brake pressure rear.*/
        signal te_press_r: size(16, 16)| sat(0.0, 160.0)| scale(0.01, 0.0)| unit("bar");
        
    }
    
    /**/
    message te_forces: id(37) | dlc(8) | period(25) {
        
        /*Accelarator torque*/
        signal te_accel_t: size(0, 16);
        
        /*Brake pressure.*/
        signal te_brk_press: size(16, 16);
        
        /*Brake eletric*/
        signal te_brk_ele: size(32, 16);
        
    }
    
    /**/
    message te_apps: id(32) | dlc(8) | period(10) {
        
        /*APPS0 position sensor measurement, directly from ADC..*/
        signal te_apps0: size(0, 16)| sat(0.0, 100.0)| scale(0.01, 0.0);
        
        /*APPS1 position sensor measurement, directly from ADC.*/
        signal te_apps1: size(16, 16)| sat(0.0, 100.0)| scale(0.01, 0.0);
        
    }
    
    /**/
    message te_brake: id(33) | dlc(8) | period(10) {
        
        /*Brake electric sensor measurement, directly from ADC.*/
        signal te_be: size(32, 16)| sat(0.0, 100.0)| scale(0.01, 0.0);
        
        /*Brake pressure 0 sensor measurement, directly from ADC.*/
        signal te_bps0: size(0, 16)| sat(0.0, 100.0)| scale(0.01, 0.0);
        
        /*Brake pressure 1 sensors measurement, directly from ADC.*/
        signal te_bps1: size(16, 16)| sat(0.0, 100.0)| scale(0.01, 0.0);
        
    }
    

    
    /**/
    config version: id(0) | type(unsigned);
    
    /*Hard Braking threshold pressure*/
    config hb_treshold: id(1) | type(unsigned);
    
    /*APPS0 GND limit*/
    config apps0_gnd: id(2) | type(unsigned);
    
    /*APPS0 VCC limit*/
    config apps0_vcc: id(3) | type(unsigned);
    
    /*APPS0 0 force (N) limit*/
    config apps0_0N: id(4) | type(unsigned);
    
    /*APPS0 max force (N) limit*/
    config apps0_maxN: id(5) | type(unsigned);
    
    /*APPS1 GND timit*/
    config apps1_gnd: id(6) | type(unsigned);
    
    /*APPS1 VCC limit*/
    config apps1_vcc: id(7) | type(unsigned);
    
    /*APPS1 0 force (N) limit*/
    config apps1_0N: id(8) | type(unsigned);
    
    /*APPS1 max force (N) limit*/
    config apps1_maxN: id(9) | type(unsigned);
    
    /*BPS0 VCC limit*/
    config bps0_vcc: id(11) | type(unsigned);
    
    /*BPS0 GND timit*/
    config bps0_gnd: id(10) | type(unsigned);
    
    /*BPS0 0 force (N) limit*/
    config bps0_0N: id(12) | type(unsigned);
    
    /*BPS0 max force (N) limit*/
    config bps0_maxN: id(13) | type(unsigned);
    
    /*BPS1 GND timit*/
    config bps1_gnd: id(14) | type(unsigned);
    
    /*BPS1 VCC limit*/
    config bps1_vcc: id(15) | type(unsigned);
    
    /*BPS1 0 force (N) limit*/
    config bps1_0N: id(16) | type(unsigned);
    
    /*BPS1 max force (N) limit*/
    config bps1_maxN: id(17) | type(unsigned);
    
    /*BE GND timit*/
    config be_gnd: id(18) | type(unsigned);
    
    /*BE VCC limit*/
    config be_vcc: id(19) | type(unsigned);
    
    /*BE 0 force (N) limit*/
    config be_0N: id(20) | type(unsigned);
    
    /*BPSe max force (N) limit*/
    config be_maxN: id(21) | type(unsigned);
    
    /*brake is not beeing pressed*/
    command brake_zero: id(0) {
    
    
    }
    
    /*brake is fully pressed*/
    command brake_max: id(1) {
    
    
    }
    
    /*accelerator is not beeing pressed*/
    command accel_zero: id(2) {
    
    
    }
    
    /*accelerator is fully pressed*/
    command accel_max: id(3) {
    
    
    }
    
    /**/
    command save_eeprom: id(4) {
    
    
    }
    
}
device master: id(14) {
    
    /**/
    message cell_tmp_info: id(56) | dlc(8) | period(1000) {
        
        /*Lowest cell temperature.*/
        signal cell_min_tmp: size(0, 16)| unit("C");
        
        /*Average temperature of all cells.*/
        signal cell_mean_tmp: size(16, 16)| unit("C");
        
        /*Highest cell temperature.*/
        signal cell_max_tmp: size(32, 16)| unit("C");
        
        /*Id of stack that contains the cell with the highest temperature.*/
        signal hottest_cell_stack: size(48, 8);
        
        /*Id of cell withing the stack that has the highest temperature.*/
        signal hottest_cell: size(56, 8);
        
    }
    
    /**/
    message master_status: id(15) | dlc(8) | period(1000) {
        
        /*AMS ok status bit.*/
        signal master_status_ams_ok: size(0, 1)| sat(0.0, 1.0);
        
        /*IMD ok status bit.*/
        signal master_status_imd_ok: size(1, 1)| sat(0.0, 1.0);
        
        /*IMD ok status bit, latched.*/
        signal master_status_imd_latch: size(2, 1)| sat(0.0, 1.0);
        
        /*AMS ok status bit, latched.*/
        signal master_status_ams_latch: size(3, 1)| sat(0.0, 1.0);
        
        /*AIR positive status.*/
        signal master_status_air_p: size(4, 1)| sat(0.0, 1.0);
        
        /*AIR negative status.*/
        signal master_status_air_n: size(5, 1)| sat(0.0, 1.0);
        
        /*Precharge relay status.*/
        signal master_status_precharge: size(6, 1)| sat(0.0, 2.0);
        
        /*Discharge relay status.*/
        signal master_status_discharge: size(7, 1)| sat(0.0, 1.0);
        
        /*Master shutdown circuit detection 1 bit. Between DCU and IMD.*/
        signal master_status_sdc1: size(8, 1)| sat(0.0, 1.0);
        
        /*Master shutdown circuit detection 2 bit. Between IMD between AMS.*/
        signal master_status_sdc2: size(9, 1)| sat(0.0, 1.0);
        
        /*Master shutdown circuit detection 3 bit. Between AMS and DCU*/
        signal master_status_sdc3: size(10, 1)| sat(0.0, 1.0);
        
        /*Master shutdown circuit detection 4 bit. Between TSMS and AIR.*/
        signal master_status_tsms_relays: size(11, 1)| sat(0.0, 1.0);
        
        /*Shutdown circuit voltage detection. Signals shutdown circuit above minimum threshold.*/
        signal master_status_sdc_above: size(12, 1)| sat(0.0, 1.0);
        
        /*Shutdown circuit open status bit.*/
        signal master_status_sdc_open: size(13, 1)| sat(0.0, 1.0);
        
        /*Master verbose status bit.*/
        signal master_status_verbose: size(14, 1)| sat(0.0, 1.0);
        
        /*Master tractive system enabled status bit.*/
        signal master_status_ts_on: size(15, 1)| sat(0.0, 1.0);
        
        /*Finished precharge detenction. Precharge End Sig.*/
        signal master_pes: size(16, 16);
        
        /*Battery ID (Car number)*/
        signal bat_id: size(32, 16);
        
    }
    
    /**/
    message master_em: id(58) | dlc(8) | period(1000) {
        
        /*Master energy meter tractive system voltage.*/
        signal master_em_voltage: size(0, 16)| unit("V");
        
        /*Master energy meter tractive system current.*/
        signal master_em_current: size(16, 16)| unit("A");
        
        /*Master energy meter tractive system power.*/
        signal master_em_power: size(32, 16)| unit("W");
        
        /*Master energy meter battery state of charge.*/
        signal master_em_soc: size(48, 16)| unit("%");
        
    }
    
    /**/
    message cell_v_info: id(57) | dlc(8) | period(1000) {
        
        /*Minimum cell voltage.*/
        signal cell_min_v: size(0, 16)| unit("V");
        
        /*Average voltage of all cells.*/
        signal cell_mean_v: size(16, 16)| unit("V");
        
        /*Maximum cell voltage.*/
        signal cell_max_v: size(32, 16)| unit("V");
        
        /*Id of stack that is the balancing target.*/
        signal bal_trg_stack: size(48, 8);
        
        /*Id of cell that is the balancing target inside the stack.*/
        signal bal_trg_cell: size(56, 8);
        
    }
    
    /**/
    message master_ts: id(12) | dlc(1) | period(0) {
        
        /*Master TS state.*/
        signal master_ts_state: size(0, 1);
        
        /*Master ts off reason.*/
        signal master_ts_off_reason: size(1, 7);
        
    }
    
    /**/
    message cell_verb_info: id(63) | dlc(8) | period(0) {
        
        /*Cell id depending on stack number.*/
        signal verb_cell_id: size(0, 16)| sat(0.0, 1.0);
        
        /*Cell voltage.*/
        signal verb_cell_v: size(16, 16)| mux("verb_cell_id", 140);
        
        /*Cell temperature.*/
        signal verb_cell_tmp: size(32, 16)| mux("verb_cell_id", 140);
        
        /*Cell State Of Charge*/
        signal verb_cell_soc: size(48, 16)| mux("verb_cell_id", 140);
        
    }
    
    /**/
    message slave_verb_info1: id(62) | dlc(8) | period(0) {
        
        /*Stack ID*/
        signal verb_stack_id1: size(0, 16);
        
        /*Slave discharge channel fault mask*/
        signal slave_verb_dcfm: size(16, 16)| mux("verb_stack_id1", 10);
        
        /*Slave temperature fault mask*/
        signal slave_verb_tfm: size(48, 16)| mux("verb_stack_id1", 10);
        
        /*slave OWC cell status*/
        signal slave_verb_owc: size(32, 16)| mux("verb_stack_id1", 10);
        
    }
    
    /**/
    message slave_verb_info2: id(61) | dlc(8) | period(0) {
        
        /*Stack ID*/
        signal verb_stack_id2: size(0, 16);
        
        /*Slave discharge channel state*/
        signal slave_verb_dcs: size(16, 16)| mux("verb_stack_id2", 10);
        
        /*Slave Discharge channel temperature*/
        signal slave_verb_dct: size(32, 16)| mux("verb_stack_id2", 10);
        
        /*ï»¿mperature*/
        signal slave_verb_bmt: size(48, 16)| mux("verb_stack_id2", 10);
        
    }
    

    
    /*git version commit*/
    config version: id(0) | type(unsigned);
    
    /*Cell Min Temperature*/
    config cell_min_t: id(2) | type(unsigned);
    
    /*Cell Max Voltage*/
    config cell_max_v: id(3) | type(unsigned);
    
    /*Cell Min Voltage*/
    config cell_min_v: id(4) | type(unsigned);
    
    /*Battery Max Voltage*/
    config bat_max_v: id(5) | type(unsigned);
    
    /*Battery Charging Delta*/
    config bat_charge_delta: id(6) | type(unsigned);
    
    /*Max Discharge Channel Temp*/
    config max_disch_channel_t: id(7) | type(unsigned);
    
    /*Cell Max temperature*/
    config cell_max_t: id(1) | type(unsigned);
    
    /*Aparent Cell Nominal Capacity*/
    config aparent_cell_nominal_capacity: id(8) | type(unsigned);
    
    /*Auto calibration time threshold*/
    config auto_calibration_time_threshold: id(9) | type(unsigned);
    
    /*Save all parameters in flash*/
    command save_flash: id(0) {
    
    
    }
    
    /*Toggle verbose*/
    command toggle_verbose: id(1) {
    
    
    }
    
    /*Toggle fans*/
    command toggle_fans: id(2) {
    
    
    }
    
    /*Toggle charging*/
    command toggle_charge: id(3) {
    
    
    }
    
    /*make fake erro*/
    command fake_error: id(4) {
    
    
    }
    
    /*reset ams error*/
    command reset_error: id(5) {
    
    
    }
    
    /*recalibrate_soc*/
    command recalibrate_soc: id(6) {
    
    
    }
    
    /*Toogle TS state on/off*/
    command common_ts: id(18) {
    
        /*step: 0(toggle), 1(ebs/dash), 2(dash)*/
        arg ts_step: id(0) | type(unsigned);
    
        /*step: 0(toggle), 1(ebs/dash), 2(dash)*/
        arg ts_step: id(0) | type(unsigned);
    
    
    }
    
    /*Gets the number of stacks and cells*/
    command get_cell_config: id(19) {
    
    
    }
    
    /*set_pwm_fan_side*/
    command set_pwm_fan_side: id(7) {
    
    
    }
    
}
device telemetry: id(17) {
    
    /**/
    message telemetry_status: id(32) | dlc(2) | period(0) {
        
        /*Status info of telemetry*/
        signal status_info: size(0, 16)| sat(0.0, 1.0);
        
    }
    
    /**/
    message flash_message: id(33) | dlc(8) | period(0) {
        
        /*device*/
        signal device: size(0, 16);
        
        /*parameter*/
        signal parameter: size(16, 16);
        
        /*parameter value*/
        signal value: size(32, 16);
        
    }
    

    
    /*This is a random command for testing*/
    command random_command: id(10) {
    
        /**/
        arg Random Argument for random command: id(20) | type(unsigned);
    
        /**/
        arg Random Argument for random command: id(20) | type(unsigned);
    
    
    }
    
}
device interface: id(31) {
    
    /**/
    message disconnect_from_server: id(33) | dlc(2) | period(0) {
        
        /*Disconnects from Server*/
        signal disconnect: size(0, 1)| sat(0.0, 1.0);
        
    }
    
    /**/
    message presence: id(32) | dlc(2) | period(4) {
        
        /*Telemetry client is present*/
        signal presence: size(0, 1)| sat(0.0, 1.0);
        
    }
    

    
}
device dcu: id(8) {
    
    /**/
    message message_status: id(32) | dlc(8) | period(100) {
        
        /*DCU shutdown circuit detection: Main Hoop -> Front..*/
        signal Detection_SC_MH_Front: size(1, 1);
        
        /*DCU shutdown circuit detection: BSPD -> AMS.*/
        signal Detection_SC_BSPD_AMS: size(2, 1);
        
        /*DCU power detection: AMS.*/
        signal Detection_VCC_AMS: size(4, 1)| sat(0.0, 1.0);
        
        /*DCU power detection: AMS Fans.*/
        signal Detection_VCC_FANS_AMS: size(5, 1)| sat(0.0, 1.0);
        
        /*DCU power detection: TSAL.*/
        signal Detection_VCC_TSAL: size(6, 1)| sat(0.0, 1.0);
        
        /*DCU TSAL blue sig.*/
        signal Blue_sig: size(18, 1)| sat(0.0, 1.0);
        
        /*DRS legacy.*/
        signal Dcdc_switch: size(19, 1)| sat(0.0, 1.0);
        
        /*DCU Brake light signal.*/
        signal BL_sig: size(20, 1)| sat(0.0, 1.0);
        
        /*DCU buzzer signal.*/
        signal Buzz_sig: size(21, 1)| sat(0.0, 1.0);
        
        /*DCU shutdown circuit: origin -> Main Hoop.*/
        signal Detection_SC_Origin_MH: size(3, 1)| sat(0.0, 1.0);
        
        /*DCU power detection: Inverter control unit A.*/
        signal Detection_VCC_CUA: size(7, 1)| sat(0.0, 1.0);
        
        /*DCU power detection: Competition data logger.*/
        signal Detection_VCC_EM: size(8, 1);
        
        /*DCU power detection: pumps.*/
        signal Detection_VCC_PUMPS: size(9, 1);
        
        /*DCU power detection: fans.*/
        signal Detection_VCC_FANS: size(10, 1)| sat(0.0, 1.0);
        
        /*DCU power detection: Inverter control unit B.*/
        signal Detection_VCC_CUB: size(11, 1)| sat(0.0, 1.0);
        
        /*DCU power detection: Low voltage essentials.*/
        signal Detection_VCC_CAN_E: size(13, 1)| sat(0.0, 1.0);
        
        /*DCU power detection: DCU + Logger.*/
        signal Detection_VCC_DATA: size(15, 1)| sat(0.0, 1.0);
        
        /*DCU power detection: Brakelight.*/
        signal Detecion_VCC_BL: size(14, 1)| sat(0.0, 1.0);
        
        /*DCU Shutdown Circuit detection: Front -> BSPD.*/
        signal Detection_SC_Front_BSPD: size(0, 1)| sat(0.0, 1.0);
        
    }
    
    /**/
    message dcu_message_current_voltage: id(33) | dlc(8) | period(100) {
        
        /*DCU Low voltage measurement.*/
        signal LV_voltage: size(32, 16)| sat(0.0, 1.0)| unit("V");
        
        /*DCU tractive system current measurement.*/
        signal HV_current: size(16, 16)type(signed)| sat(0.0, 1.0)| unit("A");
        
        /*DCU low voltage system current measurement.*/
        signal LV_current: size(0, 16)type(signed)| sat(0.0, 1.0)| unit("A");
        
    }
    

    
    /*sounds buzzer when in AS Emergency*/
    command as_emergency_buzzer: id(0) {
    
    
    }
    
}
device hw: id(19) {
    
    /**/
    message hw_status_fl: id(40) | dlc(8) | period(1000) {
        
        /*Hot Wheels: heartbeat FL.*/
        signal hw_alive_fl: size(0, 2)| sat(0.0, 1.0);
        
        /*How Wheels: Upright temperature FL.*/
        signal hw_ur_temp_fl: size(16, 16)| unit("C");
        
        /*Hot Wheels: Brake disk thermopile FL.*/
        signal hw_bd_tp_fl: size(32, 16);
        
        /*Hot wheels: Brake disk thermopile ntc FL.*/
        signal hw_bd_ntc_fl: size(48, 16);
        
    }
    
    /**/
    message hw_status_fr: id(41) | dlc(8) | period(1000) {
        
        /*Hot wheels: heartbeat FR.*/
        signal hw_alive_fr: size(0, 2)| sat(0.0, 1.0);
        
        /*Hot wheels: Up Right temperature FR.*/
        signal hw_ur_temp_fr: size(16, 16);
        
        /*Hot wheels: Brake disk thermopile FR.*/
        signal hw_bd_tp_fr: size(32, 16);
        
        /*Hot wheels: Brake disk thermopile ntc FR.*/
        signal hw_bd_ntc_fr: size(48, 16);
        
    }
    
    /**/
    message hw_status_rl: id(42) | dlc(8) | period(1000) {
        
        /*Hot wheels: heartbeat RL.*/
        signal hw_alive_rl: size(0, 2)| sat(0.0, 1.0);
        
        /*Hot wheels: Up Right temperature RL.*/
        signal hw_ur_temp_rl: size(16, 16);
        
        /*Hot wheels: Brake disk thermopile RL.*/
        signal hw_bd_tp_rl: size(32, 16);
        
        /*Hot wheels: Brake disk thermopile ntc RL.*/
        signal hw_bd_ntc_rl: size(48, 16);
        
    }
    
    /**/
    message hw_status_rr: id(43) | dlc(8) | period(1000) {
        
        /*Hot wheels: heartbeat RR.*/
        signal hw_alive_rr: size(0, 2)| sat(0.0, 1.0);
        
        /*Hot wheels: Up Right temperature RR.*/
        signal hw_ur_temp_rr: size(16, 16);
        
        /*Hot wheels: Brake disk termophile RR.*/
        signal hw_bd_tp_rr: size(32, 16);
        
        /*Hot wheels: Brake disk thermopile ntc RR.*/
        signal hw_bd_ntc_rr: size(48, 16);
        
    }
    

    
    /*version*/
    config version: id(0) | type(unsigned);
    
    /*Brake disk NTC B parameter*/
    config bd_b_param: id(1) | type(unsigned);
    
    /*Brake disk ntc resistance*/
    config bd_ntc_r: id(2) | type(unsigned);
    
    /*Brake disk ntc series resistor*/
    config bd_r: id(3) | type(unsigned);
    
    /*Thermopile S parameter*/
    config bd_tp_s: id(4) | type(unsigned);
    
    /*Up Right NTC B parameter*/
    config ur_b_param: id(6) | type(unsigned);
    
    /*Up Right NTC resistance*/
    config ur_ntc_r: id(7) | type(unsigned);
    
    /*Up Right NTC series resistor*/
    config ur_r: id(8) | type(unsigned);
    
    /*Thermophile AMPOP Gain*/
    config bd_tp_g: id(5) | type(unsigned);
    
    /**/
    command save_falsh: id(0) {
    
    
    }
    
}
device isabel: id(29) {
    
    /**/
    message isa_current: id(32) | dlc(6) | period(0) {
        
        /*Isabel measurements: Tractive system DC current.*/
        signal isa_current: size(16, 32)type(signed)| sat(-32000000.0, 32000000.0)| unit("mA");
        
    }
    
    /**/
    message isa_voltage_1: id(33) | dlc(6) | period(0) {
        
        /*Isabel measurements: battery voltage before AIR.*/
        signal isa_voltage_1: size(16, 32)type(signed)| sat(0.0, 32000000.0)| unit("mV");
        
    }
    
    /**/
    message isa_voltage_2: id(34) | dlc(6) | period(0) {
        
        /*Isabel measurements: battery voltage 2.*/
        signal isa_voltage_2: size(16, 32)type(signed)| sat(0.0, 32000000.0)| unit("mV");
        
    }
    
    /**/
    message isa_voltage_3: id(35) | dlc(6) | period(0) {
        
        /*Isabel measurements: battery voltage 3.*/
        signal isa_voltage_3: size(16, 32)type(signed)| sat(0.0, 32000000.0)| unit("mV");
        
    }
    
    /**/
    message isa_temperature: id(36) | dlc(6) | period(0) {
        
        /*Isabel temperature*/
        signal isa_temperature: size(16, 32)type(signed)| sat(-500.0, 2000.0)| unit("0.1C");
        
    }
    
    /**/
    message isa_power: id(37) | dlc(6) | period(0) {
        
        /*Isabel measurements: battery power.*/
        signal isa_power: size(16, 32)type(signed)| sat(0.0, 1024000000.0)| unit("W");
        
    }
    
    /**/
    message isa_charge: id(38) | dlc(6) | period(0) {
        
        /*Isabel measurements: battery charge*/
        signal isa_charge: size(16, 32)type(signed)| sat(-72000000000000.0, 72000000000000.0)| unit("As");
        
    }
    
    /**/
    message isa_energy: id(39) | dlc(6) | period(0) {
        
        /*Isabel measruements: battery energy.*/
        signal isa_energy: size(16, 32)type(signed)| sat(-72000000000000.0, 72000000000000.0)| unit("Wh");
        
    }
    

    
}
device sw: id(12) {
    
    /**/
    message sw_status: id(32) | dlc(2) | period(1000) {
        
        /*Status Message Mechanical Encoder 0 Position.*/
        signal status_me0_pos: size(0, 4)| sat(0.0, 8.0);
        
        /*Status Message Mechanical Encoder 1 Position.*/
        signal status_me1_pos: size(4, 4)| sat(0.0, 8.0);
        
        /*Status Message Mechanical Encoder 2 Position.*/
        signal status_me2_pos: size(8, 4)| sat(0.0, 8.0);
        
    }
    
    /**/
    message sw_selector: id(33) | dlc(8) | period(0) {
        
        /*Selector identifier*/
        signal sw_selector_mux: size(0, 16);
        
        /**/
        signal sw_selector_value: size(16, 16)| mux("sw_selector_mux", 3);
        
    }
    
    /**/
    message sw_button: id(34) | dlc(8) | period(0) {
        
        /**/
        signal sw_button_mux: size(0, 16);
        
    }
    

    
    /**/
    config version: id(0) | type(unsigned);
    
    /**/
    config luminosity: id(1) | type(unsigned);
    
    /**/
    command leds_set_bitfield: id(3) {
    
        /**/
        arg led_values: id(0) | type(unsigned);
    
        /**/
        arg led_values: id(0) | type(unsigned);
    
    
    }
    
    /**/
    command leds_set_all: id(2) {
    
    
    }
    
    /*Set SW LEDs status*/
    command leds_set: id(0) {
    
        /**/
        arg led_id: id(1) | type(unsigned);
    
        /**/
        arg led_value: id(1) | type(unsigned);
    
    
    }
    
    /**/
    command leds_clear_all: id(4) {
    
        /**/
        arg : id(0) | type(unsigned);
    
    
    }
    
    /**/
    command leds_clear: id(1) {
    
    
    }
    
}
device as: id(13) {
    
    /**/
    message DV_driving_dynamics_1: id(0) | dlc(8) | period(10) {
        
        /**/
        signal speed_actual: size(0, 8)| sat(0.0, 128.0);
        
        /**/
        signal speed_target: size(8, 8)| sat(0.0, 128.0);
        
        /**/
        signal steering_angle_actual: size(16, 8)type(signed)| sat(-150.0, 150.0)| scale(0.5, 0.0);
        
        /**/
        signal steering_angle_target: size(24, 8)type(signed)| sat(-150.0, 150.0)| scale(0.5, 0.0);
        
        /**/
        signal brake_hydr_actual: size(32, 8)| sat(0.0, 100.0);
        
        /**/
        signal brake_hydr_target: size(40, 8)| sat(0.0, 100.0);
        
        /**/
        signal motor_momentum_actual: size(48, 8)type(signed)| sat(-100.0, 100.0);
        
        /**/
        signal motor_momentum_target: size(56, 8)type(signed)| sat(-100.0, 100.0);
        
    }
    
    /**/
    message DV_driving_dynamics_2: id(1) | dlc(6) | period(10) {
        
        /**/
        signal acc_longitudinal: size(0, 16)type(signed)| sat(-20.0, 20.0)| scale(0.001953125, 0.0);
        
        /**/
        signal acc_lateral: size(16, 16)type(signed)| sat(-20.0, 20.0)| scale(0.001953125, 0.0);
        
        /**/
        signal yaw_rate: size(32, 16)type(signed)| sat(-100.0, 100.0)| scale(0.0078125, 0.0);
        
    }
    
    /**/
    message DV_system_status: id(2) | dlc(5) | period(10) {
        
        /**/
        signal AS_state: size(0, 3)| sat(1.0, 5.0);
        
        /**/
        signal EBS_state: size(3, 2)| sat(1.0, 3.0);
        
        /**/
        signal AMI_state: size(5, 3)| sat(1.0, 6.0);
        
        /**/
        signal steering_state: size(8, 1)| sat(0.0, 1.0);
        
        /**/
        signal service_brake: size(9, 2)| sat(1.0, 3.0);
        
        /**/
        signal lap_counter: size(11, 4)| sat(0.0, 15.0);
        
        /**/
        signal cone_count_actual: size(15, 8)| sat(0.0, 256.0);
        
        /**/
        signal cones_count_all: size(23, 17)| sat(0.0, 500.0);
        
    }
    

    
    /**/
    config DV_driving_dynamics_1: id(0) | type(unsigned);
    
    /**/
    config DV_driving_dynamics_2: id(1) | type(unsigned);
    
    /**/
    config DV_system_status: id(2) | type(unsigned);
    
    /*sets state*/
    command as_as_state: id(1) {
    
    
    }
    
    /*sets mission*/
    command as_as_mission: id(0) {
    
    
    }
    
}
device ebs: id(18) {
    
    /**/
    message ebs_status: id(55) | dlc(8) | period(100) {
        
        /**/
        signal ebs_as_state: size(0, 3)| sat(0.0, 4.0);
        
        /**/
        signal ebs_ebs_state: size(3, 2)| sat(0.0, 2.0);
        
        /**/
        signal ebs_assi_state: size(5, 3)| sat(0.0, 4.0);
        
        /**/
        signal ebs_sound: size(8, 1)| sat(0.0, 1.0);
        
        /**/
        signal ebs_ts: size(9, 1)| sat(0.0, 1.0);
        
        /**/
        signal ebs_r2d: size(10, 1)| sat(0.0, 1.0);
        
        /**/
        signal ebs_sta: size(11, 1)| sat(0.0, 1.0);
        
        /**/
        signal ebs_asms: size(12, 1)| sat(0.0, 1.0);
        
        /**/
        signal ebs_go_signal: size(13, 1)| sat(0.0, 1.0);
        
        /*RES pressed or not*/
        signal ebs_res: size(14, 1)| sat(0.0, 1.0);
        
    }
    

    
    /*request to change AS state*/
    command ebs_as_state: id(0) {
    
    
    }
    
    /*sets AS mission*/
    command ebs_as_mission: id(1) {
    
    
    }
    
}
device res: id(15) {
    
    /**/
    message status: id(32) | dlc(2) | period(0) {
        
        /*res go*/
        signal res_go: size(0, 1);
        
        /*res emergency*/
        signal res_emergency: size(1, 1);
        
        /*radio quality*/
        signal radio_quality: size(8, 8);
        
    }
    

    
}
device xsens: id(20) {
    
    /**/
    message XCID_Error: id(33) | dlc(1) | period(0) {
        
        /**/
        signal error_code: size(0, 8)| endianess("big")
        ;
        
    }
    
    /**/
    message XCID_GroupCounter: id(36) | dlc(2) | period(0) {
        
        /*Xsens: CAN Frame counter.*/
        signal GroupCounter: size(0, 16)| endianess("big")
        ;
        
    }
    
    /**/
    message XCID_SampleTimeUs: id(35) | dlc(4) | period(0) {
        
        /*Xsens: Time stamp in Us.*/
        signal SampleTimeUs: size(0, 32)| endianess("big")
        ;
        
    }
    
    /**/
    message XCID_UTC: id(37) | dlc(8) | period(0) {
        
        /*Xsens: GPS date - year.*/
        signal YEAR: size(0, 8)| endianess("big")
        ;
        
        /*Xsens: GPS date - month.*/
        signal MONTH: size(8, 8)| endianess("big")
        ;
        
        /*Xsens: GPS date - day.*/
        signal DAY: size(16, 8)| endianess("big")
        ;
        
        /*Xsens: GPS date - hour.*/
        signal HOUR: size(24, 8)| endianess("big")
        ;
        
        /*Xsens: GPS date - minute.*/
        signal MIN: size(32, 8)| endianess("big")
        ;
        
        /*Xsens: GPS date - seconds.*/
        signal SEC: size(40, 8)| endianess("big")
        ;
        
        /*10^-4 scalled to seconds*/
        signal TENTHMS: size(48, 16)| scale(0.0001, 0.0)| unit("Xsens: GPS date - tenth of millisecond")| endianess("big")
        ;
        
    }
    
    /**/
    message XCID_StatusWord: id(38) | dlc(4) | period(0) {
        
        /*Xsens: status word.*/
        signal StatusWord: size(0, 32)| endianess("big")
        ;
        
    }
    
    /**/
    message XCDI_Quaternion: id(39) | dlc(8) | period(0) {
        
        /*Quaternion Q0 (Qw).*/
        signal Q0: size(0, 16)type(signed)| sat(-1.0, 1.0)| scale(3.05185e-05, 0.0)| endianess("big")
        ;
        
        /*Quaternion Q1 (Qx).*/
        signal Q1: size(16, 16)type(signed)| sat(-1.0, 1.0)| scale(3.05185e-05, 0.0)| endianess("big")
        ;
        
        /*Quaternion Q2 (Qy).*/
        signal Q2: size(32, 16)type(signed)| sat(-1.0, 1.0)| scale(3.05185e-05, 0.0)| endianess("big")
        ;
        
        /*Quaternion Q3 (Qz).*/
        signal Q3: size(48, 16)type(signed)| sat(-1.0, 1.0)| scale(3.05185e-05, 0.0)| endianess("big")
        ;
        
    }
    
    /**/
    message XCDI_EulerAngles: id(40) | dlc(6) | period(0) {
        
        /*Xsens: Euler angles - Roll with resolution 0.0078.*/
        signal Roll: size(0, 16)type(signed)| sat(-180.0, 180.0)| scale(0.0078, 0.0)| unit("degree")| endianess("big")
        ;
        
        /*Xsens: Euler angles - Pitch with resolution 0.0078.*/
        signal Pitch: size(16, 16)type(signed)| sat(-90.0, 90.0)| scale(0.0078, 0.0)| unit("degree")| endianess("big")
        ;
        
        /*Xsens: Yaw with resolution 0.0078*/
        signal Yaw: size(32, 16)type(signed)| scale(0.0078, 0.0)| unit("degree")| endianess("big")
        ;
        
    }
    
    /**/
    message XCDI_Latitude: id(52) | dlc(8) | period(0) {
        
        /*Xsens: GPS latitude.*/
        signal lat: size(0, 32)type(signed)| sat(-90.0, 90.0)| scale(5.9605e-08, 0.0)| unit("degree")| endianess("big")
        ;
        
        /*Xsens: GPS longitude.*/
        signal lon: size(32, 32)type(signed)| sat(-180.0, 180.0)| scale(1.1921e-07, 0.0)| unit("degree")| endianess("big")
        ;
        
    }
    
    /**/
    message XCDI_AltitudeEllipsoid: id(54) | dlc(4) | period(0) {
        
        /*Xsens: GPS Altitude.*/
        signal altEllipsoid: size(0, 32)| sat(0.0, 50000.0)| scale(3.0518e-05, 0.0)| unit("m")| endianess("big")
        ;
        
    }
    
    /**/
    message XCDI_VelocityXYZ: id(56) | dlc(6) | period(0) {
        
        /*Xsens: velocity Z.*/
        signal velZ: size(32, 16)type(signed)| sat(-500.0, 500.0)| scale(0.0156, 0.0)| unit("m/s")| endianess("big")
        ;
        
        /*Xsens: velocity Y.*/
        signal velY: size(16, 16)type(signed)| sat(-500.0, 500.0)| scale(0.0156, 0.0)| unit("m/s")| endianess("big")
        ;
        
        /*Xsens: velocity X.*/
        signal velX: size(0, 16)type(signed)| sat(-500.0, 500.0)| scale(0.0156, 0.0)| unit("m/s")| endianess("big")
        ;
        
    }
    
    /**/
    message XCDI_Temperature: id(48) | dlc(2) | period(0) {
        
        /**/
        signal Temperature: size(0, 16)type(signed)| sat(-40.0, 85.0)| scale(0.0039, 0.0)| endianess("big")
        ;
        
    }
    
    /**/
    message XCDI_BaroPressure: id(49) | dlc(4) | period(0) {
        
        /**/
        signal Pressure: size(0, 32)| sat(30000.0, 125000.0)| scale(3.0518e-05, 0.0)| endianess("big")
        ;
        
    }
    
    /**/
    message XCDI_RateOfTurn: id(43) | dlc(6) | period(0) {
        
        /*Xsens: gyro X.*/
        signal gyrX: size(0, 16)type(signed)| sat(-35.0, 35.0)| scale(0.002, 0.0)| endianess("big")
        ;
        
        /*Xsens: gyro Y.*/
        signal gyrY: size(16, 16)type(signed)| sat(-35.0, 35.0)| scale(0.002, 0.0)| endianess("big")
        ;
        
        /*Xsens: gyro Z.*/
        signal gyrZ: size(32, 16)type(signed)| sat(-35.0, 35.0)| scale(0.002, 0.0)| endianess("big")
        ;
        
    }
    
    /**/
    message XCDI_Acceleration: id(45) | dlc(6) | period(0) {
        
        /*Xsens: Acceleration in X axis.*/
        signal accX: size(0, 16)type(signed)| sat(-100.0, 100.0)| scale(0.0039, 0.0)| unit("m/s^2")| endianess("big")
        ;
        
        /*Xsens: Acceleration in Y axis.*/
        signal accY: size(16, 16)type(signed)| sat(-100.0, 100.0)| scale(0.0039, 0.0)| unit("m/s^2")| endianess("big")
        ;
        
        /*Xsens: Acceleration in Z axis.*/
        signal accZ: size(32, 16)type(signed)| sat(-100.0, 100.0)| scale(0.0039, 0.0)| unit("m/s^2")| endianess("big")
        ;
        
    }
    
    /**/
    message XCDI_MagneticField: id(47) | dlc(6) | period(0) {
        
        /**/
        signal magX: size(0, 16)type(signed)| sat(-32.0, 32.0)| scale(0.00097656, 0.0)| endianess("big")
        ;
        
        /**/
        signal magY: size(16, 16)type(signed)| sat(-32.0, 32.0)| scale(0.00097656, 0.0)| endianess("big")
        ;
        
        /**/
        signal magZ: size(32, 16)type(signed)| sat(-32.0, 32.0)| scale(0.00097656, 0.0)| endianess("big")
        ;
        
    }
    
    /**/
    message XCDI_RateOfTurnHR: id(50) | dlc(6) | period(0) {
        
        /*High Rate*/
        signal gyrX_HR: size(0, 16)type(signed)| sat(-35.0, 35.0)| scale(0.002, 0.0)| endianess("big")
        ;
        
        /*High Rate*/
        signal gyrY_HR: size(16, 16)type(signed)| sat(-35.0, 35.0)| scale(0.002, 0.0)| endianess("big")
        ;
        
        /*High Rate*/
        signal gyrZ_HR: size(32, 16)type(signed)| sat(-35.0, 35.0)| scale(0.002, 0.0)| endianess("big")
        ;
        
    }
    
    /**/
    message XCDI_AccelerationHR: id(51) | dlc(6) | period(0) {
        
        /*High Rate*/
        signal accY_HR: size(16, 16)type(signed)| sat(-100.0, 100.0)| scale(0.0039, 0.0)| endianess("big")
        ;
        
        /*High Rate*/
        signal accX_HR: size(0, 16)type(signed)| sat(-100.0, 100.0)| scale(0.0039, 0.0)| endianess("big")
        ;
        
        /**/
        signal accZ_HR: size(32, 16)type(signed)| sat(-100.0, 100.0)| scale(0.0039, 0.0)| endianess("big")
        ;
        
    }
    
    /**/
    message XCDI_FreeAcceleration: id(46) | dlc(6) | period(0) {
        
        /**/
        signal freeAccX: size(0, 16)type(signed)| sat(-100.0, 100.0)| scale(0.0039, 0.0)| endianess("big")
        ;
        
        /**/
        signal freeAccY: size(16, 16)type(signed)| sat(-100.0, 100.0)| scale(0.0039, 0.0)| endianess("big")
        ;
        
        /**/
        signal freeAccZ: size(32, 16)type(signed)| sat(-100.0, 100.0)| scale(0.0039, 0.0)| endianess("big")
        ;
        
    }
    
    /**/
    message XCDI_DeltaV: id(57) | dlc(7) | period(0) {
        
        /**/
        signal delta_x: size(0, 16)type(signed)| sat(-0.5, 0.5)| scale(1.5259e-05, 0.0)| endianess("big")
        ;
        
        /**/
        signal delta_y: size(16, 16)type(signed)| sat(-0.5, 0.5)| scale(1.5259e-05, 0.0)| endianess("big")
        ;
        
        /**/
        signal delta_z: size(32, 16)type(signed)| sat(-0.5, 0.5)| scale(1.5259e-05, 0.0)| endianess("big")
        ;
        
    }
    

    
}
device etas: id(21) {
    
    /*Desired torque from controllers on ETAS*/
    message etas_tq: id(34) | dlc(8) | period(0) {
        
        /**/
        signal etas_trq_FL: size(0, 16)type(signed);
        
        /**/
        signal etas_trq_FR: size(16, 16)type(signed);
        
        /**/
        signal etas_trq_RL: size(32, 16)type(signed);
        
        /**/
        signal etas_trq_RR: size(48, 16)type(signed);
        
    }
    
    /**/
    message etas_mode: id(32) | dlc(8) | period(0) {
        
        /*Torque Vectoring Mode*/
        signal etas_mode_TV: size(0, 16);
        
        /*Traction Control mode*/
        signal etas_mode_TC: size(16, 16);
        
        /*Torque Distributor mode*/
        signal etas_mode_TD: size(32, 16);
        
        /*Safety mode*/
        signal etas_mode_sft: size(48, 16);
        
    }
    
    /**/
    message etas_EKF_1: id(45) | dlc(8) | period(0) {
        
        /**/
        signal EKF_x_1: size(0, 21)type(signed)| scale(1e-07, 0.0);
        
        /**/
        signal EKF_x_2: size(21, 21)type(signed)| scale(1e-07, 0.0);
        
        /**/
        signal EKF_x_3: size(42, 22)| scale(0.0001, 0.0);
        
    }
    
    /**/
    message etas_EKF_2: id(46) | dlc(8) | period(0) {
        
        /**/
        signal EKF_x_5: size(21, 21)type(signed)| scale(1e-07, 0.0);
        
        /**/
        signal EKF_x_6: size(42, 22)type(signed)| scale(0.0001, 0.0);
        
        /**/
        signal EKF_x_4: size(0, 21)type(signed)| scale(1e-07, 0.0);
        
    }
    
    /**/
    message etas_EKF_5: id(49) | dlc(8) | period(0) {
        
        /*velocity x*/
        signal EKF_x_13_vx: size(0, 21)type(signed)| scale(0.0001, 0.0);
        
        /*velocity y*/
        signal EKF_x_14_vy: size(21, 21)type(signed)| scale(0.0001, 0.0);
        
        /*yaw rate*/
        signal EKF_x_15_r: size(42, 22)type(signed)| scale(1e-05, 0.0);
        
    }
    
    /**/
    message etas_EKF_4: id(48) | dlc(8) | period(0) {
        
        /**/
        signal EKF_x_10: size(0, 21)type(signed)| scale(1e-07, 0.0);
        
        /**/
        signal EKF_x_11: size(21, 21)type(signed)| scale(1e-07, 0.0);
        
        /**/
        signal EKF_x_12: size(42, 22)type(signed)| scale(0.0001, 0.0);
        
    }
    
    /**/
    message etas_EKF_3: id(47) | dlc(8) | period(0) {
        
        /**/
        signal EKF_x_7: size(0, 21)type(signed)| scale(1e-07, 0.0);
        
        /**/
        signal EKF_x_8: size(21, 21)type(signed)| scale(1e-07, 0.0);
        
        /**/
        signal EKF_x_9: size(42, 22)type(signed)| scale(0.0001, 0.0);
        
    }
    
    /**/
    message etas_EKF_6: id(50) | dlc(8) | period(0) {
        
        /**/
        signal EKF_P_sum: size(0, 64)type(double);
        
    }
    
    /**/
    message etas_params: id(39) | dlc(6) | period(0) {
        
        /**/
        signal etas_p_TV_desired: size(0, 3);
        
        /**/
        signal etas_p_TC_desired: size(3, 3);
        
        /*Turn regen on (1) or off (0)*/
        signal etas_regen_on: size(6, 1);
        
        /*Allow or not for wheel to regen while pressing accelerator*/
        signal etas_YRC_regen_on_acc: size(7, 1);
        
        /*Max allowed power output*/
        signal etas_max_pwr: size(8, 17);
        
        /*Max allowed power*/
        signal etas_max_regen_pwr: size(25, 17);
        
        /*Init variable. Change to anything other than 1 to restore defaults*/
        signal etas_param_init: size(42, 6);
        
    }
    
    /**/
    message etas_params_mtr: id(40) | dlc(6) | period(0) {
        
        /**/
        signal etas_mtr_pwr_F: size(0, 16);
        
        /**/
        signal etas_mtr_pwr_R: size(16, 16);
        
        /**/
        signal etas_max_RPM: size(32, 16);
        
    }
    
    /**/
    message YRC_trq_limits: id(41) | dlc(8) | period(0) {
        
        /*Max torque rear (1000 = 1Nm)*/
        signal YRC_max_trq_R: size(16, 16);
        
        /*Max torque front (1000 = 1Nm)*/
        signal YRC_min_trq_F: size(32, 16);
        
        /*Min torque rear (1000 = 1Nm)*/
        signal YRC_min_trq_R: size(48, 16);
        
        /*Min torque front (1000 = 1Nm)*/
        signal YRC_max_trq_F: size(0, 16);
        
    }
    
    /**/
    message YRC_params: id(42) | dlc(8) | period(0) {
        
        /**/
        signal YRC_kp: size(0, 16);
        
        /**/
        signal YRC_ku: size(16, 8);
        
        /**/
        signal YRC_grip_factor: size(24, 8);
        
        /**/
        signal YRC_steer_factor: size(32, 8);
        
        /**/
        signal YRC_EM_pwr_lim: size(40, 17);
        
    }
    
    /**/
    message YRC_status: id(38) | dlc(8) | period(0) {
        
        /*Desired Yaw Rate from YRC*/
        signal YRC_desired_yawrate: size(0, 16)type(signed)| scale(0.001, 0.0);
        
        /**/
        signal QP_exitflag: size(16, 4)type(signed);
        
    }
    
    /**/
    message PL_params: id(43) | dlc(8) | period(0) {
        
        /**/
        signal PL_max_pwr: size(0, 32);
        
        /**/
        signal PL_kp_gain: size(32, 16);
        
        /**/
        signal PL_ki_gain: size(48, 16);
        
    }
    
    /**/
    message EM_params: id(44) | dlc(8) | period(0) {
        
        /**/
        signal EM_enable: size(0, 1);
        
        /**/
        signal EM_total_laps: size(1, 8);
        
        /**/
        signal EM_curr_lap: size(9, 8);
        
        /**/
        signal EM_init_pwr_lim: size(18, 17);
        
        /**/
        signal EM_pwr_lim: size(36, 17);
        
        /**/
        signal etas_cell_temp_derating: size(53, 8);
        
    }
    

    
    /*Turn on or off regen*/
    config regen_on: id(3) | type(unsigned);
    
    /*Yaw rate controller max torque front*/
    config YRC_trq_max_F: id(5) | type(unsigned);
    
    /*Yaw rate controller max torque rear*/
    config YRC_trq_max_R: id(6) | type(unsigned);
    
    /**/
    config YRC_trq_min_R: id(8) | type(unsigned);
    
    /*Max power per motor (Front)*/
    config mtr_pwr_max_F: id(9) | type(unsigned);
    
    /*Max power per motor (Rear)*/
    config mtr_pwr_max_R: id(10) | type(unsigned);
    
    /*Torque Vectoring Operation mode*/
    config TV_des_mode: id(1) | type(unsigned);
    
    /*Traction controller operation mode*/
    config TC_des_mode: id(2) | type(unsigned);
    
    /*Maximum power in regeneration (negative)*/
    config regen_pwr_max: id(12) | type(unsigned);
    
    /**/
    config RPM_max: id(13) | type(unsigned);
    
    /*Check sum. Set to 0 to reset to defaults*/
    config check_sum: id(0) | type(unsigned);
    
    /**/
    config YRC_acc_neg_trq: id(4) | type(unsigned);
    
    /**/
    config YRC_kp_gain: id(14) | type(unsigned);
    
    /**/
    config YRC_ku: id(15) | type(unsigned);
    
    /**/
    config max_pwr: id(11) | type(unsigned);
    
    /**/
    config YRC_trq_min_F: id(7) | type(unsigned);
    
    /**/
    config YRC_grip_factor: id(16) | type(unsigned);
    
    /**/
    config YRC_steer_factor: id(17) | type(unsigned);
    
    /**/
    config PL_pwr_limit: id(18) | type(unsigned);
    
    /**/
    config PL_ki: id(20) | type(unsigned);
    
    /**/
    config PL_kp: id(19) | type(unsigned);
    
    /**/
    config EM_enable: id(21) | type(unsigned);
    
    /**/
    config EM_total_laps: id(22) | type(unsigned);
    
    /**/
    config EM_curr_lap: id(23) | type(unsigned);
    
    /**/
    config EM_pwr_lim: id(24) | type(unsigned);
    
}
device prog_mux: id(6) {
    
    /*A status message*/
    message prog_mux_status: id(32) | dlc(8) | period(1000) {
        
        /*The selected channel*/
        signal prog_mux_channel: size(0, 16)| sat(0.0, 8.0);
        
    }
    

    
    /**/
    config version: id(0) | type(unsigned);
    
    /*Change prog_mux channel*/
    command set_channel: id(0) {
    
    
    }
    
}
device du_rear: id(23) {
    
    /*adc values from rear suspension potentiometers*/
    message adc_values_rear: id(32) | dlc(4) | period(100) {
        
        /*Dynamic Unit: Suspension travel RL, directly from ADC.*/
        signal adc_rear_left: size(0, 16)| sat(0.0, 4096.0);
        
        /*Dynamic Unit: Suspension travel RR, directly from ADC.*/
        signal adc_rear_right: size(16, 16)| sat(0.0, 4096.0);
        
    }
    

    
    /*sets left potentiometer value as reference*/
    command rear_left_reference: id(0) {
    
    
    }
    
    /*sets right potentiometer value as reference*/
    command rear_right_reference: id(1) {
    
    
    }
    
}
device du_front: id(22) {
    
    /*ADC values from front suspension potentiometers.*/
    message adc_values_front: id(32) | dlc(4) | period(100) {
        
        /*Dynamic Unit: Suspension travel FL, directly from ADC. */
        signal adc_front_left: size(0, 16)| sat(0.0, 4096.0);
        
        /*Dynamic Unit: Suspension travel FR, directly from ADC.*/
        signal adc_front_right: size(16, 16)| sat(0.0, 4096.0);
        
    }
    

    
    /*sets left potentiometer value as reference*/
    command front_left_reference: id(0) {
    
    
    }
    
    /*sets right potentiometer value as reference*/
    command front_right_reference: id(1) {
    
    
    }
    
}
device lv_bms: id(27) {
    
    /**/
    message lv_bms_status: id(57) | dlc(8) | period(0) {
        
        /**/
        signal lv_bms_charging: size(2, 1);
        
        /**/
        signal lv_bms_verbose: size(1, 1);
        
        /**/
        signal lv_bms_balance_ok: size(3, 1);
        
    }
    
    /**/
    message lv_bms_soc: id(62) | dlc(8) | period(0) {
        
        /**/
        signal lv_bms_soc_pct: size(0, 8);
        
    }
    
    /**/
    message lv_bms_cell_info_temps: id(55) | dlc(8) | period(0) {
        
        /**/
        signal temp_id: size(0, 8);
        
        /**/
        signal temp_value: size(8, 8)| mux("temp_id", 8);
        
    }
    
    /**/
    message lv_bms_cell_info_voltage: id(63) | dlc(8) | period(1000) {
        
        /**/
        signal volt_id: size(0, 8);
        
        /**/
        signal volt_value: size(8, 16)| mux("volt_id", 8);
        
    }
    
    /**/
    message lv_bms_summary_volt_1: id(51) | dlc(8) | period(0) {
        
        /**/
        signal batt_volt: size(0, 16);
        
        /**/
        signal max_volt: size(16, 16);
        
        /**/
        signal max_volt_cell: size(32, 8);
        
    }
    
    /**/
    message lv_bms_summary_volt_2: id(52) | dlc(8) | period(0) {
        
        /**/
        signal min_volt: size(0, 16);
        
        /**/
        signal min_volt_cell: size(16, 8);
        
        /**/
        signal max_min_delta: size(24, 16);
        
        /**/
        signal mean_volt: size(40, 16);
        
    }
    
    /**/
    message lv_bms_summary_temp: id(53) | dlc(8) | period(0) {
        
        /**/
        signal max_temp: size(0, 16);
        
        /**/
        signal max_temp_cell: size(16, 8);
        
        /**/
        signal min_temp: size(24, 16);
        
        /**/
        signal min_temp_cell: size(40, 8);
        
        /**/
        signal mean_temp: size(48, 16);
        
    }
    
    /**/
    message lv_bms_ltc_info_1: id(59) | dlc(8) | period(0) {
        
        /**/
        signal cell_pu_id: size(0, 8);
        
        /**/
        signal cell_pu_value: size(8, 16)| mux("cell_pu_id", 8);
        
        /**/
        signal cell_pd_id: size(24, 8);
        
        /**/
        signal cell_pd_value: size(32, 8)| mux("cell_pd_id", 8);
        
        /**/
        signal owc_diff_id: size(40, 8);
        
        /**/
        signal owc_diff_value: size(48, 16)| mux("owc_diff_id", 8);
        
    }
    
    /**/
    message lv_bms_ltc_info_2: id(50) | dlc(8) | period(0) {
        
        /**/
        signal owc_sequence: size(0, 8);
        
        /**/
        signal cell_connection_fault_mask: size(8, 8);
        
        /**/
        signal temp_fault_mask: size(16, 8);
        
        /**/
        signal num_valid_cell_ntc: size(24, 8);
        
        /**/
        signal owc_cell_status: size(32, 8);
        
    }
}
device strain_gauges: id(28) {
    
    /**/
    message sg_adc_values_1: id(32) | dlc(8) | period(10) {
        
        /**/
        signal adc_values_1: size(0, 16);
        
        /**/
        signal adc_values_2: size(16, 16);
        
        /**/
        signal adc_values_3: size(32, 16);
        
        /**/
        signal adc_values_4: size(48, 16);
        
    }
    
    /**/
    message sg_adc_values_2: id(33) | dlc(4) | period(10) {
        
        /**/
        signal adc_values_6: size(16, 16);
        
        /**/
        signal adc_values_5: size(0, 16);
        
    }
}

device common: id(0) {
    
    /**/
    message ans_get: id(4) | dlc(8) | period(0) {
        
        /**/
        signal data: size(16, 32);
        
        /**/
        signal dst: size(8, 8);
        
        /**/
        signal id: size(0, 5);
        
    }
    
    /**/
    message ans_set: id(6) | dlc(8) | period(0) {
        
        /**/
        signal data: size(16, 32);
        
        /**/
        signal dst: size(8, 8);
        
        /**/
        signal id: size(0, 5);
        
    }
    
    /**/
    message log: id(0) | dlc(8) | period(0) {
        
        /**/
        signal arg1: size(16, 16);
        
        /**/
        signal arg2: size(32, 16);
        
        /**/
        signal arg3: size(48, 16);
        
        /**/
        signal err_code: size(8, 8);
        
        /**/
        signal level: size(0, 3);
        
        /**/
        signal n_args: size(3, 2);
        
    }
    
    /**/
    message req_get: id(3) | dlc(8) | period(0) {
        
        /**/
        signal dst: size(0, 5);
        
        /**/
        signal id: size(8, 8);
        
    }
    
    /**/
    message req_set: id(5) | dlc(8) | period(0) {
        
        /**/
        signal data: size(16, 32);
        
        /**/
        signal dst: size(0, 5);
        
        /**/
        signal id: size(8, 8);
        
    }
    
    /**/
    message return_cmd: id(2) | dlc(8) | period(0) {
        
        /**/
        signal id: size(8, 8);
        
        /**/
        signal ret1: size(16, 16);
        
        /**/
        signal ret2: size(32, 16);
        
        /**/
        signal ret3: size(48, 16);
        
    }
    
    /**/
    message send_cmd: id(1) | dlc(8) | period(0) {
        
        /**/
        signal arg1: type("uint16_t") | sat(0.0, 65535.0);
        
        /**/
        signal arg2: size(32, 16)| sat(0.0, 65535.0);
        
        /**/
        signal arg3: size(48, 16)| sat(0.0, 65535.0);
        
        /**/
        signal dst: size(0, 5)| sat(0.0, 31.0);
        
        /**/
        signal id: size(8, 8)| sat(0.0, 255.0);
        
    }
}

log wrong_log_id: id(0) | str("Log code was not found");

log wrong_cfg_id: id(1) | str("Cfg code was not found");

log high_temp: id(2) | str("Temp exceeds %d");

log wrong_cmd_id: id(3) | str("Cmd id is not valid");

log trap_handler_type: id(4) | str("Error type %d");

log reset_message: id(5) | str("Device was reset");

log ntc_number: id(6) | str("There are %d NTCs");

log flow_state: id(7) | str("");

log motor_state: id(8) | str("");

log rtd_on: id(9) | str("RTD On");

log rtd_off: id(10) | str("RTD Off");

log ts_state: id(11) | str("TS is %d. Error: %d ");

log iib_wtd_ext: id(12) | str("No watchdog value found for external input.");
