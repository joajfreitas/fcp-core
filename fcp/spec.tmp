from typing import *
import copy
import datetime
import time

from .specs.cmd import Command
from .specs.node import Node
from .specs.common import Common
from .specs.message import Message
from .specs.signal import Signal
from .specs.config import Config
from .specs.device import Device
from .specs.log import Log

def handle_key_not_found(d: dict, key: str):
    return d.get(key).items() if d.get(key) != None else []

def normalize(xs: Dict[str, Any], key: Callable[[Any], str] = None):
    """Update xs dictionary keys according to key.
        By default key is `lambda x : x.name`

    :param xs: Dictionary containing spec node
    :param key: Function that returns the key for a particular node
    """

    if key == None:
        key = lambda x: x.name

    aux = []

    for k, x in xs.items():
        if k != key(x):
            aux.append((k, key(x)))

    for k, key in aux:
        xs[key] = xs[k]
        del xs[k]












