/*
 * CAN-IDS template for FST10e
 * Copyright © 2019 João Freitas
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 *
 * --------------------------------------------------------------------------
 *
 *
 * This file was automatically generated in {{date}}
 * 
 */

#ifndef __COMMON_CAN_H__
#define __COMMON_CAN_H__

#include "common.h"


{% for message in spec.common.msgs.values() %}
msg_common_{{message.type.lower()}} decode_common_{{message.name}}(CANdata msg) {
	msg_common_{{message.type.lower()}} msg_struct;

	{%- for signal in message.signals.values() %}
	{%- if signal.mux_count > 1 %}
	msg_struct.{{signal.name}}[msg_struct.{{signal.mux}}] = decode_common_{{message.name}}_{{signal.name}}(msg);
	{%- else %}
	msg_struct.{{signal.name}} = decode_common_{{message.name}}_{{signal.name}}(msg);
	{%- endif %}
	{%- endfor %}

	return msg_struct;
}
{% endfor %}


void decode_{{spec.common.name}}(CANdata msg, {{spec.common.signature}} *dev) {
	switch (msg.msg_id) {
	{%- for message in spec.common.msgs.values() %}
		case {{message.id}}:
			dev->{{message.name}} = decode_common_{{message.name}}(msg);
			break;
	{%- endfor %}
	}
}

{% for message in spec.common.msgs.values() %}
CANdata encode_common_{{message.name}}(msg_common_{{message.type.lower()}} msg, uint16_t dev_id) {
	uint64_t word = 0;
	CANdata message;
	message.msg_id = {{message.id}};
	message.dev_id = dev_id;
	message.dlc = {{message.dlc}};
	uint64_t *ptr = (uint64_t *) &message.data;
	{% for signal in message.signals.values() %}
	{%- if signal.mux_count > 1 %}
	word |= encode_common_{{message.name}}_{{signal.name}}(msg.{{signal.name}}[msg.{{signal.mux}}]);
	{%- else %}
	word |= encode_common_{{message.name}}_{{signal.name}}(msg.{{signal.name}});
	{%- endif %}
	{% endfor %}
	*ptr = word;	
	return message;
}
{% endfor %}

#endif
