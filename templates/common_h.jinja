/*
 * CAN-IDS template for FST10e
 * Copyright © 2019 João Freitas
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 *
 * --------------------------------------------------------------------------
 *
 *
 * This file was automatically generated in {{date}}
 * 
 */

#ifndef __COMMON__H_
#define __COMMON__H_ 

#include <stdint.h>
#include "candata.h"
#include "signal_parser.h"

{% for message in spec.common.msgs.values()|sort(attribute='id') %}
#define MSG_ID_{{spec.common.name.upper()}}_{{message.name.upper()}} {{message.id}}
{%- endfor %}


{% for message in spec.common.msgs.values() %}
typedef struct _{{message.type.lower()}} {
	{%- for signal in message.signals.values() %}
	{%- if signal.mux_count > 1 %}
	{{signal.dst_type}} {{signal.name}}[{{signal.mux_count}}];
	{%- else %}
	{{signal.dst_type}} {{signal.name}};
	{%- endif %}
	{%- endfor %}
} {{message.type.lower()}}; 
{%- endfor %}

typedef struct _{{spec.common.signature.lower()}} {
{% for message in spec.common.msgs.values() %}
	{{message.type.lower()}} {{message.name}};
{%- endfor %}
} {{spec.common.signature.lower()}};

{% for message in spec.common.msgs.values() %}
{% for signal in message.signals.values() %}
#define decode_common_{{message.name}}_{{signal.name}}(msg) decode_signal_{{signal.type}}_as_{{signal.dst_type}}((msg), {{signal.start}}, {{signal.length}}, {{signal.scale}}, {{signal.offset}});
{% endfor %}
{% endfor %}


{% for message in spec.common.msgs.values() %}
{{message.type.lower()}} decode_common_{{message.name}}(CANdata msg);
{%- endfor %}

void decode_{{spec.common.name}}(CANdata msg, {{spec.common.signature}} *dev);

{% for message in spec.common.msgs.values() %}
CANdata encode_common_{{message.name}}({{message.type.lower()}}, uint16_t dev_id);
{%- endfor %}

{% for message in spec.common.msgs.values() %}
{% for signal in message.signals.values() %}
#define encode_common_{{message.name}}_{{signal.name}}(signal) encode_signal_{{signal.type}}_from_{{signal.dst_type}}((signal), {{signal.start}}, {{signal.length}}, {{signal.scale}}, {{signal.offset}});
{% endfor %}
{% endfor %}


#endif /* ifndef __COMMON__H_ */
