/*
 * CAN-IDS template for FST10e
 * Copyright © 2019 João Freitas
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * --------------------------------------------------------------------------
 *
 * This file was automatically generated in {{date}}
 *
 */

 #ifndef NO_{{device.name.upper()}}

 #include "can_ids.h"
 #include "{{device.name}}_can.h"

 const char *cfg_{{device.name}}_names[] = {
 {%- for cfg in device.cfgs.values() %}
 "{{cfg.name}}",
 {%- endfor %}
};

{% for message in device.msgs.values() %}
{{message.type.lower()}} decode_{{message.name.lower()}}(CANdata msg) {
	{{message.type.lower()}} msg_struct = {0} ;
	
	{%- for signal in message.signals.values() %}
	{%- if signal.mux_count <= 1 %}
	msg_struct.{{signal.name}} = decode_{{message.name.lower()}}_{{signal.name}}(msg);
	{%- endif %}
	{%- endfor %}

	{%- for signal in message.signals.values() %}
	{%- if signal.mux_count > 1 %}
	msg_struct.{{signal.name}}[msg_struct.{{signal.mux}}] = decode_{{message.name.lower().lower()}}_{{signal.name}}(msg);
	{%- endif %}
	{%- endfor %}

	return msg_struct;
}
{% endfor %}

void decode_{{device.name}}(CANdata msg, {{device.signature.lower()}} *dev) {
	switch (msg.msg_id) {
	{%- for message in device.msgs.values() %}
		case {{message.id}}:
			dev->{{message.name.lower().lower()}} = decode_{{message.name.lower()}}(msg);
			break;
	{%- endfor %}
	}
}

{% for message in device.msgs.values() %}
{% if message.mux_count == 0 %}
CANdata encode_{{message.name.lower()}}({{message.type.lower()}} msg) {
	uint64_t word = 0;
	CANdata message;
	message.msg_id = {{message.id}};
	message.dev_id = {{device.id}};
	message.dlc = {{message.dlc}};
	uint64_t *ptr = (uint64_t *) &message.data;
	{% for signal in message.signals.values() %}
	{%- if signal.mux_count > 1 %}
	word |= encode_{{message.name.lower()}}_{{signal.name}}(msg.{{signal.name}}[msg.{{signal.mux}}]);
	{%- else %}
	word |= encode_{{message.name.lower()}}_{{signal.name}}(msg.{{signal.name}});
	{%- endif %}
	{% endfor %}
	*ptr = word;
	return message;
	}
{% else %}
	CANdata encode_{{message.name.lower()}}({{message.type.lower()}} msg, uint32_t {{message.multiplexor}}) {
	uint64_t word = 0;
	CANdata message;
	message.msg_id = {{message.id}};
	message.dev_id = {{device.id}};
	message.dlc = {{message.dlc}};
	uint64_t *ptr = (uint64_t *) &message.data;
	{% for signal in message.signals.values() %}
	{%- if signal.mux_count > 1 %}
	word |= encode_{{message.name.lower()}}_{{signal.name}}(msg.{{signal.name}}[{{message.multiplexor}}]);
	{%- elif signal.name == message.multiplexor %}
	word |= encode_{{message.name.lower()}}_{{signal.name}}({{message.multiplexor}});
	{%- else %}
	word |= encode_{{message.name.lower()}}_{{signal.name}}(msg.{{signal.name}});
	{%- endif %}
	{% endfor %}
	*ptr = word;
	return message;
	}
{% endif %}
{% endfor %}

void {{device.name}}_send_msgs({{device.signature.lower()}} dev, uint32_t m_secs) {
	static uint32_t time=0;
	{%if f_msgs|length > 0%}
	static uint32_t task_times[{{f_msgs|length}}] = {0};
	{%- endif %}
	int i;
	if (time == m_secs) {
		return;
	}
	time = m_secs;


	CANdata msg;

	{%if f_msgs|length > 0%}
	{% for message in f_msgs %}
	if (time - task_times[{{loop.index0}}] >= {{message.frequency}}) {
		{% if message.mux_count == 0 %}
			msg = encode_{{message.name.lower()}}(dev.{{message.name.lower()}});
			dev_send_msg(msg);
		{% else %}
			for (i=0; i<{{message.mux_count}}; i++) {
				msg = encode_{{message.name.lower()}}(dev.{{message.name.lower()}}, i);
				dev_send_msg(msg);
			}
		{% endif %}
		task_times[{{loop.index0}}] = time;
	}
	{%- endfor -%}
	{%- endif %}
}
#endif
