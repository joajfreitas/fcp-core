/*
 * CAN-IDS template for FST10e
 * Copyright © 2019 João Freitas
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 *
 * --------------------------------------------------------------------------
 *
 *
 * This file was automatically generated in {{date}}
 * 
 */

#ifndef __CAN_IDS_H__
#define __CAN_IDS_H__

/* LOG IDs */
{%- for log in logs %}
#define LOG_{{log.name.upper()}} {{log.id}}
{%- endfor %}

{% for device in devices %}
#include "{{device.name}}_can.h"
{%- endfor %}
#include "common.h"

/* DEVICE IDs */
{%- for device in devices %} 
#define DEVICE_ID_{{device.name.upper()}}	{{device.id}} 
{%- endfor %}

/* CAN Structure */
typedef struct _{{spec.signature}} {
{%- for device in devices %}
	#ifndef NO_{{device.name.upper()}}
	{{device.signature}} {{device.name}};
	#endif
{%- endfor %}
	{{spec.common.signature}} {{spec.common.name}};
} {{spec.signature}};

/** @fn void decode_can(CANdata msg, can_t *can)
 *  @brief Decode a CAN packet.
 *  @param msg CAN packet.
 *  @param can Structure that holds all signals.
 */
void decode_can(CANdata msg, {{spec.signature}} *can);

/** @fn uint16_t dev_get_id()
 *  @brief User defined function that returns the device id used in the user's code.
 *  @return device id.
 */
 uint16_t dev_get_id();

/** @fn void dev_send_msg(CANdata)
 *  @brief User defined function that sends  a CAN packet to the bus.
 *  @param msg CAN packet.
 */
void dev_send_msg(CANdata msg);
#endif
